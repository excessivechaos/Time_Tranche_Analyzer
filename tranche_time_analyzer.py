import base64
import ctypes
import datetime as dt
import functools
import gc
import os
import json
import platform
import queue
import subprocess
import threading
import uuid
import webbrowser
from io import BytesIO
from typing import Tuple
import matplotlib
import numpy as np
import pandas as pd
import PySimpleGUI as sg
from dateutil import parser
from dateutil.relativedelta import relativedelta
from openpyxl.utils import get_column_letter
from PIL import Image, ImageTk
import yfinance as yf
from CSV_merger import main as csv_merger_window
import seaborn as sns

matplotlib.use("TkAgg")
import matplotlib.pyplot as plt

# make app dpi aware
try:
    ctypes.windll.shcore.SetProcessDpiAwareness(1)
except Exception:
    pass

__version__ = "v.1.14.6"
__program_name__ = "Tranche Time Analyzer"

if True:  # code collapse for base64 strings
    icon = b"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"

    checked = b"iVBORw0KGgoAAAANSUhEUgAAAGQAAABkCAYAAABw4pVUAAAR7klEQVR4nO2deZAcV33Hv7/3XnfPzB7alYyR0OEjOMfKFOEKxCaMFEJMqlKAtOoNAQpCFRhDAJsbA1ZPKzJHOIwNJI4h4CP42LGkMuWqmFRS3k1SJApHoFISYDkRpdWBDkt7ztH93vvlj96RVtIcu9rZ1e7sfqq2dqXt7u3pb7/f9X79mgCgN3f0Q9JJf9Sa0mowEwDCMvMDkZXKe87ExXsfD14Q0LZg6DYn03WXjopgG2NZi/mHSMBJdaJcGP5r2hYePU1CdVkbM4HE5T65JQkzQwgGW1IAutnGINDy0LhcEFHiKgiTI2JZi4WCarQBgy0YTMCyOZsFDNjEDNV3C3UFYbasnLQQyoPRZYC5uWe5VCBAqpS0JoaOC7aeKDUFYbas3DayJnpGF0tfYsJ+ttYIoZZVmQHWahIgwXH0GxDyNsdtf2lcHmMiUdVP1BCErXLSZE10oKj1jU+Ga0/N5UkvEX7gf/nQ42YCA8pte4WOi4YAeeFGNQQhK1VK2cKZzz4ZrjuVDQ6mNuHqaP/+/LL3vwR6enzeu/KAk791Q3FLcCjwnPQ/1tq2uiDMUsdFWCF/Dma6si8fh/lr7IWbBQGLZZHOp6fH5zCkatcqfgpMCkPPxuVRS0JKsGVckG7UderWagIRw+8//xdJeQUhXfyHl0kIAhYXC0MMHJr8Xp2GYe/FcCISgK13nvxtl2hFHBcv7VAthYa1DnnptrFHP9mxLxGDqd7Fr8bMrmIQCITgLTtPrFFE3yHGH1mGlDI9o8O0Jg6kBGxc5L47T/2HNvYvdm+nAwhYoIoJq8WMBAmQAwLQPh0/5HWufm1x7Jglntkd0OowMafSz7vBjJ/anQ0OvmIwhzLC6ZdCpp19V2zi/+Dob5JUry2OHTdJ4rlUvgAmYk6qTme/QMDU7QhClCZOasdrv34VvN8DEfv9PO3rPO0RUommCPFKEh6T0QLU2gVJBlsCLAOCSAgpFBEJVBJtZgubVDD4vGvBRETEUuhVM/2bM/bEFtLKpBrZsqaKmQ0BwnHbhFCusCaGjia00dEZEI0QcxlEzOB2Al0lnBSZuHTB/UlkIWcchS710Og8mJlBYDfdKU1chtGlHxlbfkqAfkBWHqDS+Em87NrxfB8ZAHj9B57xOp/ftpGtflQq74XGlGc9p7QsyCQMa4V0hVQemai0h2G/kt+++t/r7fPUPddFIPpJb27ouOOtuM6Y8qzzsmVBADBbq5y0YOYzcVy4Zdf2NZOZMFM2gLxyI7hnHzjMTTpxEGcDVoNEessdh7Y4Xuer42jMEuii2tRMWfKCMFsrnZRg5uNxafSmPTuv/Vk2eFpduf8k5/NkBkPosxuHybfJiFO/+fb/fb5x09+wJm6aP13SgjBbFtIBQCVTHnnjnp3X/uzmv2PnvvdQXGcv2r8R5Pv9UqfbHnHc1JqoOGKIxKxHB7CkZwGZhZBGqrSIy8W37/qra/e+7OYfNRADyAaQ+T4yvPHGr7vprs1RaVQ3SwxgSQsC46a7lC6PfGrPjnX5l938I+fH9728gRisBkPSvcHQB91M9y1R4bQmUFOtzJI0WcxWe22rVKlw+qFdufWfm7zQDcR4Wg2GpLfecegm5bZ9NS6PaYBlsxtEltwIYbbGTa1QcXFkr7Bn3uX7LAdzMPX2CQIWg+Fm7QeHXqi89CPMBtZqceFcRjNYUoIw2EonJXRcOq5NvC0fXh/19IAr0wnVd0rmfl73kWNtUN5uId1uo8t1GxVmwxIShFmQZAJZo4t9e8L1h/1+ltVm96ZA2RxkGJJd0WEfcLyOF8XlsaY68QtZQoLAOKkVMoonPrQ73PCv2YBVpQRSi2zAcjAkvS13OHDbVvVGxTOaSMyp310SgjCzdtMrVVQ8/cCe3IavVaKlevtUnPiWOw5uUV5nLiqe0ajSJdJsWl4QZjaO166i4sjP2mx0i+/3T9uJv+kzB3/H8ToeMKZk2Ro5F078QlpbELYslEPWxGMU6z97ILym1NPjT8uJ+8HxdtfNPC6k6rA6rtnY1mxaWxAhjHLSwsQT78rvXPfLbPC0auDEUXHiEPo7KtXRE5fHNdHsi4bTpWUTQ2arvcwVqjx+6mu7wqv6p+c3km22bh+63cms2hYVnptzJ34hLTlCmK1xvE4VFc/8cNUL1n7E72+c/Pn9SUS19Y5DN7mp9s/GxeF5ceIX0nqCMLNQLlkTjZGJ33Lfeyju2Vc/+QsCFvk+Mn5wZINy09+1VrNlMyeZeCNaTxAio5yM0HHhlny44dnGfiMpp2cDVizFY9LxVs1lJt6I1hKEWbvpbhUVhv9+d7jh4cQnbG7gN5Jy+hV0+G4v3f2qZpfTZ0rLCMJsrXQzKi6N/KIM+uB0ioaV5G9bMPR2N73yfeXC6Xl34hfSIoIwC6GY2caAfduT4doCkEc9v+H7/XIw3Ky3BIeuF076XhNNGDBftpFRoUUEgXHSK6SJip/Kb3/Bj7MBq3y+r/boOFvB/Wmbku5jQqq0MREthMa/RS8IszVOaoWKCmf+eVe47ksVM1Rvn2wOMp/vMx0dV9zrpFZMJn9iQVyLxZ0YsmWhPNJR4Yyx7jsBpk2AHayzy7lp2MO3eJmVb4uKl99vTGVB3BWXDCWlEdal9+0Jrzjs96PKQzLnSPwG6d4dh18i3fTdujxmwPOf/NVj0QrCbI2b7lJRafi7j4cbHm04v8FMPT0++8HxdkHOI0TCNSZeEH5jKotSkMpUbFwaG9K27f1BwKJhiDtZNLTC3Ot4nb9lookF4zemsuBOaDoQCSuEQ9qUb34i7B7evxFUL8StOPre3NC7vXTXW6PiaY0F5DemsggFYe2mu1RcGv3bPeGGpxqZqqn5hnTS9+jy+ILzG1NZkHdJLRhslUqruDjybLpdfcz3+2U+B1Ppub14BybkgXf0HEwVhPOwECoVx+N2viabLoVFNUIEBIMI1sTv/oePrZkA/LrZeDaX1KnGhfNVJ9P1ooWUb9RiQZ/cVJitcTJdMi6N3bMrXD+QZOO1TdXZOlV42HdTXe+JCnPfMdIMFoUgDLbKzYioMHwgInl74hdqR1WVJoWtnz56FUn3Ph0XLdguWL8xlbkXhJkBaIA1AM3MdcPTakcQIAaI2OqbnwzXFuD7qP1APtMABgQzk3D5QaXSXVaXGQvYb0xl7oYwMzPYCulK5WYUkQCYwWDEpZGL1viocyDjZFaq0vipb+wO1w9kg6dVvq92rSobQA6Gm3UvHwpSHVe+pnwZ5sVnw5yMEGZrSDrkZVZKMD+ny+OPlQvDH47Lo++MiiMPSpUiJOuk1H3yiMFWqpSMCyMHJdxPJj1Vm+qEuJPz4uGRG1WqfXtcGtbNeMxsPmnyncNghvHS3VJHhZO6NHaXlJlvP/rpjuNTNrrf3/Hrnzpu21ei0miDEJSYhBIGpffuDteO+/0sa0ZVzNSTA7/hCyc7ZFk/SAxhrAZhcZiqCk0UhAEi66Y6ZRxNPIxi6eP5z244AiQdHSf2JQ9SjB/7MeW3r75rW+7INsfruCGOxk21u5jZGi+zUpYLz92/O7f++w1NVVIa0b25w193MquuLU88Z0hcvqnYS6VpghCEkU5a6vLYx/Pb13wRmCx152DydC48zQasACYWv76bhLwBjIueeZmsVVFcGv21YP5IELAIkatdxe1nme8jvSU49GY33fX2qHhGk1g8fmMqTfEhzGxUqlOaqPDF/PY1X8wGrJLQk/SFJiYpAhJrk/qnqDRyWkhHTkZiUw4IliolrNG35sMNp/dvBCEMqwqStPDAbgmG1imV+hsdFy0w/bVFFhqzP3FmltKRUWn0JKzcEQQsBgFbc14iWYxFPhF2DxPo+8ptY0wZQZNldRkVR763K1zXP2mqajryAQwIgFgQfVu5mW6ry4xFvEL3rIc1E1mhPGnK48/mwzXjYK5beQWAE/sGCADY2oeZzZ8zWzEZFrOQLul4YlTJ1PvBTJtytWcAk2x8s94WDN3mtq16XbQAukZmSxPuJCZmAwJ1+35/7ShoCoPhJgMwiVH7L3Fp9JB0UgLJQsPG8ToER6XPPHbHqqFsbqDmE06VbLx3x7GNwkl/Pi6NGlyG1s9mM2tBCCCrIzDhKrz4VasBIAiCBsclzgaQ+bs2FAF6UDltYGtj5barqHB670Za/42k13ZzDVN1rtuQGPcL6XjWaFyO1s9m04QRQmTZGMdrT8M4vwsA+zfmGl6YTchZgElLvi8ujRalk3KtiZk1vzcMySKfB2okjtlgQOb7yKzC4e1upvvlOhqb10cG5pKmOD8CWAgHFnYzAFRyjnqEYWj9fogn7lg3xDb+gpvpYBMXb9u1c91/+z7LWn1VlQmn3nDolcrNfDounjFYZNl4PZoT9gLCmjKI6Q8BpnqV2Knk+5KVO6ln7c7y+MmeXeH6e4IgEDXL6swE+HhHcDAlyPk2kRCWDbWCqarQpBFCQkdFJiFe9KbgyHUAcRBMKxdggDjfRya/fd0vk1V2qucbAJDNDch8nsw4qzud9IoeExc0YWFPOM2UJn4Ya5xUp1JENwGggZkdm6ovPHyOpHC4WW8Njr5Gpdo+HBeGW8pUVWiaIMwgtgYgegMA3gTMZHW1qstzTzk4AcDNwZGMFOJbAGBhW/LlZU0ThAhCRxNg0I3+zkNrw5AsGoa/06Niqk4Rf87JrLjOxEXdqu/LauKHImI22kuvSLN1/wRgyiI36+NXTJUfHs06btsH40JrRVUX0tS77KzZstoHaKZmq9oBCcjjT4MjGQZ9E2BYtPZ7FpsqyFmzRfIPtgSn1oUh2cZZe20SU9VnPDZ3upmu63QLm6oKTf5w58yWoNIbAWDgEs1WxVT1BsdvUF7brXFhuOpEVqvR9LuNAbImBoHeAgCDl2S2kqjqA3ezB2G/SSTIwrS0qarQdEEIJHU0zqTcV23ZcfzFCMG+3z+jOzsbJFHV4dNDgZfp7tEtmADWYq4+pHHcNiFtdAtAnPRRTY+ztaodh1/iuG0fi4vDLVFWny5zJYiMS2NMwnmLHxxf3bMvN81SCtOJnueR77MkpvuEUMpag1aqVTVijgQhYtbGSa3otFz+RBiGdj/21ZnJYwoCFq//wAF3MNyszcahD7uZlS/X0fyuxLMQmMvpThmVhq3y2t63JfjVQ/nw6p9UnHUQTHXOOYQh2TAEAyj3BodvECq1o1VmAGfKHApCxGwZgKtk5nE/OPZmYN9P8+H10eTFP4vfzxLPnrgGMfWRpNvBNmXM/C0atpCY04YAAgkdF1k66Wssm71A9//15o6eIaAAQCN5e41nf37sShBd7aU73bg0Bmv1khQDuARBWNCM3q5DJMjokiWQkCp1bbKuiziXUTCDrYExZZQLw4aS1wu1gBjMTDPPm6YtSE+PzwBAVo6xtcRA1Xe5ViMpdzBrXeLkMQI+J2lyykQAtYwDJzAzkyQxOtNdpy1IUpdiMQD84nnm6A9T7Ve8ojR+Us88JOVq/+TzVVrUsJfpUlFx+Fdk1X+BmfIEe34gU5sZm6zBkPTWHSfeqsvjjzpex0tBlXHZAlZmVlTuLIaOys8Y0Nv2hM8fD8AiROWtn42ZkSCV14nu3k4Hstnglav/+Nbft8Z0AwZJs8HSRRAz4IGkGuPnfvGfe+66oQhmmun7gusKwlZXucjEQRCIMAw1BsN/m9lpLx2CgEU1MYyJiFTtV9XWFUQqNTnU8uf9f9IZwuT7EJh+mWrJkO+r1WzO5HgnrDZxTWtSVRAGrHTS0salawDaO/ZqVkEPV/O4jH2XfN4tS+LAz/cZ+wEFUKT10Hon1SHiaKLqQpvVRwiBrImYpPqE/6EfPJG/lYpPzdHJLyEiABDS/cxkAFQ1pKRt4dGqv2Cwddx2YXR5L1lzJ5N5BsYaobyWiE3nC6vLJCCEVs7VAvRRqbzXxdF4zWVoa/oQAok4GreO0/ZKKPpeHI1bkOSky3yZaUMSlghKupJIoJ4YQAOnTiARxxM2+VmIxbHuw8JExwULgBv1BTTMQ86pabk1EunLw3S7ZSYFqfIo7MWHXNKJ33whGDxOQtmLnoRdZj5hECyRgADElx2vQyy0xSCXFgw33S2std8iMJO/49gXhJP6S6PLqclO82Vx5gsiK6UXa11+aKJr9fv/H4FVCYlw1NLbAAAAAElFTkSuQmCC"
    unchecked = b"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"

    donate_paypal_logo = b""
    donate_venmo_logo = b""


sg.theme("Reddit")
themes = {"Light": "Reddit", "Dark1": "Dark", "Dark2": "DarkGrey11", "Dark3": "Black"}
# themes = {theme:theme for theme in sg.theme_list()}
button_color = sg.theme_button_color()  # get button color from reddit theme
if sg.running_windows():
    font = ("Segoe UI", 12)
else:
    font = ("Arial", 14)
sg.SetOptions(font=font, icon=icon, element_padding=(5, 5))
screen_size = sg.Window.get_screen_size()
image_aspect_ratio = 0.5


# results queue for threads
results_queue = queue.Queue()
cancel_flag = threading.Event()

weekday_list = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
analysis_options = {
    "weekday_exclusions": [],
    "put_or_call": True,
    "idv_weekday": True,
    "news_exclusions": [],
}

news_events = {
    "CPI": [],
    "Initial Jobless Claims": [],
    "Retail Sales": [],
    "ADP": [],
    "JOLT": [],
    "Unemployment/NFP": [],
    "PPI": [],
    "GDP": [],
    "PCE": [],
    "Triple Witching": [],
    "Beige Book": [],
    "ISM Manufacturing PMI": [],
    "ISM Services PMI": [],
    "S&P Global PMI": [],
    "Fed Chair Speech": [],
    "FOMC Minutes": [],
    "FOMC": [],
    "MI Consumer Sent.": [],
    "Chicago PMI": [],
}
news_events_loaded = False


# Allows custom checkbox icon
class Checkbox(sg.Checkbox):
    elements = []

    def __init__(self, *args, **kwargs):
        font = kwargs.get("font", sg.DEFAULT_FONT)
        w, h = sg.Text.char_width_in_pixels(font), sg.Text.char_height_in_pixels(font)
        text_color = kwargs.get("text_color", sg.theme_text_color())
        background_color = kwargs.get("background_color", sg.theme_background_color())
        self.images = [self.icon(i, h, text_color, background_color) for i in range(2)]
        size = kwargs.get("size", None)
        size = (size, 1) if isinstance(size, int) else size
        size = (
            (size[0] * w + h + h // 3, size[1] * h)
            if size
            else (len(args[0]) * w + h + h // 3, h)
        )
        kwargs["size"] = size
        super().__init__(*args, **kwargs)
        Checkbox.elements.append(self)

    @staticmethod
    def initial(window):
        # Called after window finalized
        for element in Checkbox.elements:
            element.widget.configure(
                indicatoron=False,
                image=element.images[0],
                selectimage=element.images[1],
                compound=sg.tk.LEFT,
                borderwidth=0,
                offrelief=sg.tk.FLAT,
                selectcolor=sg.theme_background_color(),
            )
        window.refresh()

    def icon(self, i, h, fg, bg):
        box = (h, h)
        im = Image.new("RGBA", (h + h // 3, h), bg)
        im_check = Image.open(BytesIO(base64.b64decode(checked if i else unchecked)))
        im_check = im_check.resize(box, resample=Image.LANCZOS)
        im.paste(im_check, (0, 0), im_check)
        photo_image = ImageTk.PhotoImage(im)
        return photo_image

    @staticmethod
    def clear_elements():
        Checkbox.elements.clear()


def with_gc(func):
    """
    Decorator to garbage collect threaded functions.
    This resolves the Tcl_AsyncDelete error
    """

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        gc.collect()
        return result

    return wrapper


def analyze(
    df: pd.DataFrame,
    settings: dict,
) -> Tuple[
    pd.DataFrame, pd.DataFrame, pd.DataFrame, pd.DataFrame, pd.DataFrame, pd.DataFrame
]:
    if df.empty or settings["-PASSTHROUGH_MODE-"]:
        return pd.DataFrame(columns=["Date Range"]), pd.DataFrame(
            columns=["Date Range"]
        )
    short_avg_period = settings["-AVG_PERIOD_1-"]
    long_avg_period = settings["-AVG_PERIOD_2-"]
    short_weight = settings["-PERIOD_1_WEIGHT-"] / 100
    long_weight = settings["-PERIOD_2_WEIGHT-"] / 100
    calc_type = settings["-CALC_TYPE-"]
    agg_type = "".join(word[0] for word in settings["-AGG_TYPE-"].split("-"))

    def calculate_avg_pnl(df: pd.DataFrame) -> float:
        if df.columns[0] == "Date Opened":  # OO BT data
            return df["P/L"].sum() / df["No. of Contracts"].sum()
        elif df.columns[0] == "TradeID":  # BYOB BT data
            df["P/L"] = (
                df["ProfitLossAfterSlippage"] - df["CommissionFees"] / 100
            ) * 100
            return df["P/L"].mean()
        else:
            raise ValueError("Unknown dataset type")

    def calculate_pcr(df: pd.DataFrame) -> float:
        if df.columns[0] == "Date Opened":  # OO BT data
            return df["P/L"].sum() / (df["Premium"] * df["No. of Contracts"]).sum()
        elif df.columns[0] == "TradeID":  # BYOB BT data
            df["P/L"] = df["ProfitLossAfterSlippage"] - df["CommissionFees"] / 100
            return df["P/L"].sum() / df["Premium"].sum()
        else:
            raise ValueError("Unknown dataset type")

    def calculate_rolling_averages(df, short_avg_period, long_avg_period, agg_type):
        if agg_type == "W":
            short_avg_period = int(short_avg_period * 4.33)
            long_avg_period = int(long_avg_period * 4.33)
        elif agg_type == "SM":  # semi-monthly
            short_avg_period = int(short_avg_period * 2)
            long_avg_period = int(long_avg_period * 2)

        short_avg = df.rolling(short_avg_period, min_periods=1).mean()
        long_avg = df.rolling(long_avg_period, min_periods=1).mean()
        weighted_avg = short_weight * short_avg + long_weight * long_avg
        return weighted_avg

    def create_output_labels(df, long_avg_period, start_date, end_date, agg_type):
        output_labels = pd.DataFrame(index=df.index)
        for i, (date, row) in enumerate(df.iterrows()):
            if agg_type == "M":
                current_period_end = date.to_timestamp() + pd.offsets.MonthEnd(1)
                previous_period_start = (
                    current_period_end - pd.DateOffset(months=long_avg_period - 1)
                ).replace(day=1)
            elif agg_type == "W":
                current_period_end = date.to_timestamp() + pd.offsets.Week(weekday=6)
                previous_period_start = current_period_end - pd.DateOffset(
                    weeks=int(long_avg_period * 4.33)
                )
            elif agg_type == "SM":  # Semi-Monthly
                if date.day <= 15:
                    current_period_end = pd.Timestamp(date.year, date.month, 15)
                    previous_period_start = current_period_end - pd.DateOffset(
                        months=long_avg_period
                    )
                else:
                    current_period_end = pd.Timestamp(
                        date.year, date.month, date.days_in_month
                    )
                    previous_period_start = (
                        current_period_end - pd.DateOffset(months=long_avg_period - 1)
                    ).replace(day=1)
                # if previous_period_start.day > 15:
                #     previous_period_start = previous_period_start.replace(day=16)
                # else:
                #     previous_period_start = previous_period_start.replace(day=1)
            else:
                current_period_end = date.to_timestamp() + pd.offsets.DateOffset(
                    freq=agg_type
                )
                previous_period_start = current_period_end - pd.DateOffset(
                    freq=agg_type, periods=long_avg_period - 1
                )

            if i == 0:
                date_range_label = f"{end_date} - {previous_period_start.date()}"
            elif i == len(df) - 1:
                date_range_label = f"{current_period_end.date()} - {start_date}"
            else:
                date_range_label = (
                    f"{current_period_end.date()} - {previous_period_start.date()}"
                )
            output_labels.loc[date, "Date Range"] = date_range_label
        return output_labels

    def perform_analysis(df_grouped):
        if calc_type == "PCR":
            df_calc = df_grouped.apply(calculate_pcr, include_groups=False)
        elif calc_type == "PnL":
            df_calc = df_grouped.apply(calculate_avg_pnl, include_groups=False)
        else:
            raise ValueError("Invalid calc_type. Expected 'PCR' or 'PnL'.")

        if isinstance(df_calc.index, pd.MultiIndex):
            df_calc = df_calc.unstack(level=-1)

        weighted_avg = calculate_rolling_averages(
            df_calc, short_avg_period, long_avg_period, agg_type
        )
        one_month_avg = df_calc.rolling(
            1 if agg_type == "M" else 2 if agg_type == "SM" else 4, min_periods=1
        ).mean()

        weighted_avg.sort_index(ascending=False, inplace=True)
        one_month_avg.sort_index(ascending=False, inplace=True)

        if isinstance(weighted_avg, pd.Series):
            weighted_avg = weighted_avg.to_frame()

        if calc_type == "PCR":
            weighted_avg = weighted_avg.apply(lambda x: round(x, 4))
            one_month_avg = one_month_avg.apply(lambda x: round(x, 4))
        elif calc_type == "PnL":
            weighted_avg = weighted_avg.apply(lambda x: round(x, 2))
            one_month_avg = one_month_avg.apply(lambda x: round(x, 2))

        output_labels = create_output_labels(
            weighted_avg, long_avg_period, start_date, end_date, agg_type
        )
        one_month_avg_labels = create_output_labels(
            one_month_avg, 1, start_date, end_date, agg_type
        )

        df_output = pd.concat([output_labels, weighted_avg], axis=1)
        df_output_1mo_avg = pd.concat([one_month_avg_labels, one_month_avg], axis=1)

        return df_output, df_output_1mo_avg

    # get list of news event dates to skip.
    news_date_exclusions = []
    if settings["-APPLY_EXCLUSIONS-"] != "Walk Forward Test":
        for release, date_list in news_events.items():
            if release in settings["-NEWS_EXCLUSIONS-"]:
                news_date_exclusions += date_list

        # filter df for news exclusions
        df = df[~df["EntryTime"].dt.date.isin(news_date_exclusions)]

        # filter for weekday exlusions
        df = df[~df["Day of Week"].isin(settings["-WEEKDAY_EXCLUSIONS-"])]

    if agg_type == "SM":
        # Custom function to create semi-monthly periods
        def semi_monthly_period(date):
            return pd.Timestamp(
                date.year, date.month, 15 if date.day <= 15 else date.days_in_month
            )

        df["period"] = df["EntryTime"].apply(semi_monthly_period)
        df_grouped_combined = df.groupby(["period", "Time"])
    else:
        df_grouped_combined = df.groupby(
            [df["EntryTime"].dt.to_period(agg_type), "Time"]
        )
    start_date = df["EntryTime"].min().date()
    end_date = df["EntryTime"].max().date()

    if df.empty:
        df_output_combined, df_output_1mo_avg_combined = pd.DataFrame(
            columns=["Date Range"]
        ), pd.DataFrame(columns=["Date Range"])
    else:
        df_output_combined, df_output_1mo_avg_combined = perform_analysis(
            df_grouped_combined
        )

    return (
        df_output_combined,
        df_output_1mo_avg_combined,
    )


def create_excel_file(
    file,
    settings,
    open_files,
) -> dict:
    calc_type = settings["-CALC_TYPE-"]
    short_avg_period = settings["-AVG_PERIOD_1-"]
    short_weight = settings["-PERIOD_1_WEIGHT-"] / 100
    long_avg_period = settings["-AVG_PERIOD_2-"]
    long_weight = settings["-PERIOD_2_WEIGHT-"] / 100
    top_x = settings["-TOP_X-"]
    weekday_exclusions = []
    news_date_exclusions = []
    if settings["-APPLY_EXCLUSIONS-"] != "Walk Forward Test":
        weekday_exclusions = settings["-WEEKDAY_EXCLUSIONS-"]
        # get list of news event dates to skip.
        for release, date_list in news_events.items():
            if release in settings["-NEWS_EXCLUSIONS-"]:
                news_date_exclusions += date_list

    # load the data
    result = load_data(file)
    if result:
        df, start_date, end_date = result
        filtered_df = df[
            (~df["Day of Week"].isin(weekday_exclusions))
            & (~df["EntryTime"].dt.date.isin(news_date_exclusions))
        ]
    else:
        return

    # path and orginal filename
    path = os.path.join(os.path.dirname(file), "data", "heatmaps")
    org_filename = os.path.splitext(os.path.basename(file))[0]
    os.makedirs(path, exist_ok=True)

    # Create filename
    filename = os.path.join(
        path,
        (
            f"{org_filename}-TWAvg({calc_type})_{short_avg_period}mo({short_weight * 100:.0f})-{long_avg_period}mo({long_weight * 100:.0f})_{start_date} -"
            f" {end_date}.xlsx"
        ),
    )

    # Create a Pandas Excel writer using XlsxWriter as the engine
    with pd.ExcelWriter(filename, engine="xlsxwriter") as writer:

        # Get the xlsxwriter workbook
        workbook = writer.book

        # get the sheets for day of week
        day_to_num = {
            "Monday": 1,
            "Tuesday": 2,
            "Wednesday": 3,
            "Thursday": 4,
            "Friday": 5,
            "Saturday": 6,
            "Sunday": 7,
        }

        days_sorted = ["All"]
        if settings["-IDV_WEEKDAY-"]:
            # This gets the unique days of the week from the DataFrame, then sorts them based on the numerical value
            days_sorted = days_sorted + sorted(
                [
                    d
                    for d in filtered_df["Day of Week"].unique()
                    if d not in settings["-WEEKDAY_EXCLUSIONS-"]
                ],
                key=lambda day: day_to_num[day],
            )

        df_dicts = {"Put-Call Comb": {}}
        if settings["-PUT_OR_CALL-"]:
            df_dicts["Puts"] = {}
            df_dicts["Calls"] = {}

        if settings["-GAP_ANALYSIS-"]:
            for strat in df_dicts.copy():
                df_dicts[f"{strat} Gap Up"] = {}
                df_dicts[f"{strat} Gap Down"] = {}

        gap_error = False
        for strat in df_dicts.copy():
            for day in days_sorted:
                # check for cancel flag to stop thread
                if cancel_flag.is_set():
                    return

                # filter for the weekday
                # we will keep a dataset with exlusions filtered out and one
                # with all the data.  We will sort and filter those both for
                # the analysis but the analysis will only happen on the filtered df
                # this will allow us to store either the filtered df that has the
                # exclusions removed or the original df that was filtered for the analysis
                # type, but still has the excluded events.  This filtered, but non-excluded
                # df will be what is used for the WF test.  This allows events/weekday exclusions
                # to be done for analysis only, but still traded during the WF test.
                if day == "All":
                    _df = df
                    _filtered_df = filtered_df
                else:
                    _df = df[df["Day of Week"] == day]
                    _filtered_df = filtered_df[filtered_df["Day of Week"] == day]

                # filter for calls/puts
                if strat.startswith("Puts"):
                    _df = _df[_df["OptionType"] == "P"]
                    _filtered_df = _filtered_df[_filtered_df["OptionType"] == "P"]
                elif strat.startswith("Calls"):
                    _df = _df[_df["OptionType"] == "C"]
                    _filtered_df = _filtered_df[_filtered_df["OptionType"] == "C"]

                # filter for gaps
                _gap_type = "Gap%" if settings["-GAP_TYPE-"] == "%" else "Gap"
                try:
                    if strat.endswith("Gap Up"):
                        _df = _df[_df[_gap_type] > settings["-GAP_THRESHOLD-"]]
                        _filtered_df = _filtered_df[
                            _filtered_df[_gap_type] > settings["-GAP_THRESHOLD-"]
                        ]
                    elif strat.endswith("Gap Down"):
                        _df = _df[_df[_gap_type] < -settings["-GAP_THRESHOLD-"]]
                        _filtered_df = _filtered_df[
                            _filtered_df[_gap_type] < -settings["-GAP_THRESHOLD-"]
                        ]
                except KeyError:
                    # gap data did not load, maybe no internet
                    _df = pd.DataFrame(columns=df.columns)
                    _filtered_df = pd.DataFrame(columns=df.columns)
                    if not gap_error:
                        gap_error = True  # only notify once
                        results_queue.put(
                            (
                                "-ERROR-",
                                "Gap data could not be loaded!\nAnalysis will continue without it.",
                            )
                        )

                # run the analysis
                if settings["-APPLY_EXCLUSIONS-"] != "Walk Forward Test":
                    # exclusions are only for WF, so use the non-filtered df
                    df_output, df_output_1mo_avg = analyze(_df, settings)
                    # store the results and the original df in case we need it later
                    df_dicts[strat][day[:3]] = {"org_df": _df, "result_df": df_output}
                else:
                    # otherwise we use the filtered/excluded df for analysis
                    df_output, df_output_1mo_avg = analyze(_filtered_df, settings)
                    # store the results and the original df in case we need it later
                    if settings["-APPLY_EXCLUSIONS-"] == "Analysis":
                        # since we are only excluded from analysis we will store the non-filtered df
                        df_dicts[strat][day[:3]] = {
                            "org_df": _df,
                            "result_df": df_output,
                        }
                    else:
                        # otherwise we are exluding from both so we can should store the filtered df
                        df_dicts[strat][day[:3]] = {
                            "org_df": _filtered_df,
                            "result_df": df_output,
                        }

                # create the sheets
                if not settings["-PASSTHROUGH_MODE-"]:
                    df_output.to_excel(
                        writer, sheet_name=f"{strat}_{day[:3]}", index=False
                    )
                    df_output_1mo_avg.to_excel(
                        writer, sheet_name=f"{strat}_1mo-{day[:3]}", index=False
                    )

        # use All df from Put/Call Combined for row and col lengths
        df_output = df_dicts["Put-Call Comb"]["All"]["result_df"]
        # Set the PCR columns to percentage format
        percent_format = workbook.add_format({"num_format": "0.00%", "align": "center"})
        top_x_format = workbook.add_format(
            {"bold": 1, "font_color": "#FFFFFF"}
        )  # white
        for row in range(
            2, len(df_output) + 2
        ):  # +2 because Excel's index starts from 1 and there is a header row
            for worksheet in writer.sheets.values():
                # Apply a conditional format to the PCR cells in the current row
                worksheet.conditional_format(
                    f"B{row}:{get_column_letter(len(df_output.columns))}{row}",
                    {
                        "type": "3_color_scale",
                        "min_color": "red",
                        "mid_color": "yellow",
                        "max_color": "green",
                    },
                )
                # Format top x values in bold white text
                if top_x > 0:
                    worksheet.conditional_format(
                        f"B{row}:{get_column_letter(len(df_output.columns))}{row}",
                        {
                            "type": "top",
                            "value": top_x,
                            "format": top_x_format,
                        },
                    )
                if calc_type == "PCR":
                    worksheet.set_row(row - 1, None, percent_format)

        # Adjust the column widths
        for column in df_output:
            column_length = max(
                df_output[column].astype(str).map(len).max() + 1, len(column) + 1
            )
            col_idx = df_output.columns.get_loc(column)
            for worksheet in writer.sheets.values():
                worksheet.set_column(col_idx, col_idx, column_length)

    # open file in excel
    if open_files:
        try:
            if platform.system() == "Windows":
                os.startfile(filename)
            elif platform.system() == "Darwin":  # This is the value returned for macOS
                subprocess.Popen(["open", filename])
            else:
                subprocess.call(("xdg-open", filename))  # linux
        except:
            pass

    return df_dicts


def chunk_list(input_list, chunk_size=4):
    return [
        input_list[i : i + chunk_size] for i in range(0, len(input_list), chunk_size)
    ]


def export_oo_sig_file(trade_log_df: pd.DataFrame, filename: str):
    """
    Takes a trade log df and converts to an
    Option Omega signal file that can be loaded
    into OO for backtesting and adding to OO portfolio
    """
    signal_data = []
    for _, trade in trade_log_df.iterrows():
        if "Legs" in trade and isinstance(trade["Legs"], str):
            # OO data processing (unchanged)
            legs = trade["Legs"].split("|")
            for leg in legs:
                leg_parts = leg.strip().split(" ")
                signal_data.append(
                    {
                        "OPEN_DATETIME": (
                            trade["Date Opened"].strftime("%Y-%m-%d")
                            + " "
                            + trade["Time Opened"][:5]
                        ),
                        "BUY_SELL": "B" if leg_parts[5] == "BTO" else "S",
                        "CALL_PUT": leg_parts[4],
                        "STRIKE": leg_parts[3],
                        "EXPIRATION": trade["Date Opened"].strftime("%Y-%m-%d"),
                        "QUANTITY": int(leg_parts[0]) * trade["qty"],
                    }
                )
        else:
            # BYOB data processing
            open_datetime = trade["EntryTime"].strftime("%Y-%m-%d %H:%M")

            # Handle close datetime
            if pd.notnull(trade["CloseDate"]) and pd.notnull(trade["CloseTime"]):
                close_datetime = f"{trade['CloseDate']} {trade['CloseTime'][:5]}"
            else:
                # Use OpenDate and set time to 16:00 if CloseDate or CloseTime is missing
                close_datetime = f"{trade['OpenDate']} 16:00"

            signal_data.append(
                {
                    "OPEN_DATETIME": open_datetime,
                    "BUY_SELL": "S",  # We'll do short for the first leg
                    "CALL_PUT": trade["OptionType"],
                    "STRIKE": trade["ShortStrike"],
                    "EXPIRATION": trade["OpenDate"],
                    "QUANTITY": trade["qty"],
                }
            )
            signal_data.append(
                {
                    "OPEN_DATETIME": open_datetime,
                    "BUY_SELL": "B",  # We'll do long for the second leg
                    "CALL_PUT": trade["OptionType"],
                    "STRIKE": trade["LongStrike"],
                    "EXPIRATION": trade["OpenDate"],
                    "QUANTITY": trade["qty"],
                }
            )

    path = os.path.dirname(filename)
    basename = os.path.basename(filename)
    result_df = pd.DataFrame(signal_data)
    result_df.to_csv(filename, index=False)  # full signal file with puts and calls
    for right in ["Puts", "Calls"]:  # separate signal files
        fitlered = result_df[result_df["CALL_PUT"] == right[0]]
        file_path = os.path.join(path, f"{right}_{basename}")
        fitlered.to_csv(file_path, index=False)

    return result_df


def get_dpi_scale():
    try:
        user32 = ctypes.windll.user32
        user32.SetProcessDPIAware()
        dpi = user32.GetDpiForSystem()
        return dpi / 96.0  # 96 is the standard DPI
    except:
        return 1  # Default to no scaling if not on Windows or if there's an error


def format_float(value):
    """This will remove decmal from float for GUI
    display purposes, but only when decimal is .0"""
    if isinstance(value, float) and value.is_integer():
        return str(int(value))
    elif value == float("-inf"):
        return ""
    elif isinstance(value, bool):
        return value
    else:
        return str(value)


@with_gc
def get_correlation_matrix(results):
    # Create a DataFrame with daily PnL for each strategy
    pnl_data = {strategy: df["Day PnL"] for strategy, df in results.items()}
    pnl_df = pd.DataFrame(pnl_data)

    # Calculate the correlation matrix
    corr_matrix = pnl_df.corr()

    # Create a heatmap
    plt.figure(figsize=(8, 5))
    sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", vmin=-1, vmax=1, center=0)
    plt.title("Strategy Correlation Matrix")

    # Rotate x-axis labels
    plt.xticks(rotation=30, ha="right")

    # Rotate y-axis labels
    plt.yticks(rotation=0, ha="right")

    # Adjust layout to prevent cutting off labels
    plt.tight_layout()

    # Save the plot to a buffer
    buf = BytesIO()
    plt.savefig(buf, format="png", dpi=150, bbox_inches="tight")
    buf.seek(0)

    # Convert the image to base64
    img_str = base64.b64encode(buf.getvalue())
    plt.close()

    return img_str


@with_gc
def get_monthly_pnl_chart(results):
    plt.figure(figsize=(12, 6))

    # Get all unique months across all strategies
    all_months = set()
    for df in results.values():
        df["Date"] = pd.to_datetime(df["Date"])
        all_months.update(df["Date"].dt.to_period("M"))
    all_months = sorted(list(all_months))

    # Set up the x-axis
    x = np.arange(len(all_months))
    width = 0.8 / len(results)  # Adjust bar width based on number of strategies

    # Plot bars for each strategy
    for i, (strategy, df) in enumerate(results.items()):
        monthly_pnl = df.groupby(df["Date"].dt.to_period("M"))["Day PnL"].sum()

        # Align the strategy's data with all_months
        pnl_values = [monthly_pnl.get(month, 0) for month in all_months]

        plt.bar(x + i * width, pnl_values, width, label=strategy, alpha=0.8)

    plt.title("Monthly PnL")
    plt.xlabel("Month")
    plt.ylabel("PnL")
    plt.legend()

    # Set x-axis ticks
    plt.xticks(
        x + width * (len(results) - 1) / 2,
        [m.strftime("%Y-%m") for m in all_months],
        rotation=45,
        ha="right",
    )

    plt.tight_layout()
    # buffer for saving data
    buf = BytesIO()
    plt.savefig(buf, dpi=150, bbox_inches="tight")
    buf.seek(0)
    # Convert PNG to base64 string
    img_str = base64.b64encode(buf.getvalue())
    plt.close()
    return img_str


@with_gc
def get_pnl_plot(results):
    table_data = []
    plt.figure(figsize=(8, 4))
    for strategy, df in results.items():
        plt.plot(df["Date"], df["Current Value"], label=strategy)
        # Calculate summary statistics for the strategy
        final_value = df["Current Value"].iloc[-1]
        max_dd = df["Max DD"].max()
        dd_days = df["DD Days"].max()
        initial_value = df["Initial Value"].min()
        total_return = (final_value - initial_value) / initial_value
        win_streak = df["Win Streak"].max()
        loss_streak = df["Loss Streak"].max()
        # CAGR
        start_dt = df["Date"].iloc[0]
        end_dt = df["Date"].iloc[-1]
        years = (end_dt - start_dt).days / 365.25
        cagr = ((final_value / initial_value) ** (1 / years)) - 1

        # Sharpe Ratio
        df["Daily Return"] = df["Current Value"].pct_change()
        std_dev = df["Daily Return"].std()
        risk_free_rate = 0.02 / 252  # Assume 2% annual risk-free rate, convert to daily
        excess_returns = df["Daily Return"] - risk_free_rate
        sharpe_ratio = np.sqrt(252) * excess_returns.mean() / std_dev  # Annualized

        if max_dd:
            mar = cagr / max_dd
        else:
            mar = float("inf")

        # Group PnL by month
        df["YearMonth"] = df["Date"].dt.to_period("M")
        monthly_pnl = df.groupby("YearMonth")["Day PnL"].sum()

        # Calculate largest and lowest monthly PnL with their corresponding dates
        largest_monthly_pnl = monthly_pnl.max()
        largest_monthly_pnl_date = monthly_pnl.idxmax().to_timestamp()
        lowest_monthly_pnl = monthly_pnl.min()
        lowest_monthly_pnl_date = monthly_pnl.idxmin().to_timestamp()

        # Format the date strings
        largest_monthly_pnl_str = (
            f"{largest_monthly_pnl:,.2f} {largest_monthly_pnl_date.strftime('%b%y')}"
        )
        lowest_monthly_pnl_str = (
            f"{lowest_monthly_pnl:,.2f} {lowest_monthly_pnl_date.strftime('%b%y')}"
        )

        # Create row for Table
        row_data = [
            f"{strategy}",
            f"{final_value:,.2f}",
            f"{(final_value - initial_value):,.2f}",
            f"{total_return:,.2%}",
            f"{cagr:.2%}",
            f"{max_dd:.2%}",
            f"{dd_days}",
            f"{win_streak}",
            f"{loss_streak}",
            largest_monthly_pnl_str,
            lowest_monthly_pnl_str,
            f"{mar:.2f}",
            f"{sharpe_ratio:.2f}",
        ]

        table_data.append(row_data)

    plt.title("P/L Walk Forward Test")
    plt.xlabel("Date")
    plt.ylabel("Current Value")
    plt.legend()
    plt.grid(True)
    # plt.xticks(rotation=45)
    plt.tight_layout()

    # buffer for saving data
    buf = BytesIO()
    plt.savefig(buf, dpi=150)
    buf.seek(0)
    # Convert PNG to base64 string
    img_str = base64.b64encode(buf.getvalue())
    plt.close()
    return table_data, img_str


@with_gc
def get_news_event_pnl_chart(results, sum=True):
    # Get list of news events
    events = list(news_events.keys())

    # Initialize a dictionary to hold summed PnL for each strategy and news event
    summed_pnls = {
        strategy: {event: 0 for event in events} for strategy in results.keys()
    }

    # Sum the PnL values for each strategy and news event
    for strategy, df in results.items():
        for event, dates in news_events.items():
            event_dates = pd.to_datetime(dates)
            if sum:
                event_pnl = df[df["Date"].dt.date.isin(event_dates.date)][
                    "Day PnL"
                ].sum()
            else:
                event_pnl = df[df["Date"].dt.date.isin(event_dates.date)][
                    "Day PnL"
                ].mean()
            summed_pnls[strategy][event] = event_pnl

    # Prepare data for the bar chart
    x = np.arange(len(events))  # the label locations
    width = 0.8 / len(results)
    fig, ax = plt.subplots(figsize=(10, 5))

    # Plot bars for each strategy
    for i, (strategy, pnl_dict) in enumerate(summed_pnls.items()):
        pnls = [pnl_dict[event] for event in events]
        ax.bar(x + (i - (len(results) - 1) / 2) * width, pnls, width, label=strategy)

    # Add labels, title, and custom x-axis tick labels
    if sum:
        ax.set_ylabel("Total PnL")
        ax.set_title("PnL by News Event")
    else:
        ax.set_ylabel("Average PnL")
        ax.set_title("Avgerage PnL Per News Event")
    ax.set_xticks(x)
    ax.set_xticklabels(events, rotation=45, ha="right")
    ax.legend(loc="upper center", bbox_to_anchor=(0.5, 1.25), ncol=min(len(results), 4))

    fig.subplots_adjust(bottom=0.3)
    plt.tight_layout()
    # buffer for saving data
    buf = BytesIO()
    plt.savefig(buf, dpi=150, bbox_inches="tight")
    buf.seek(0)
    # Convert PNG to base64 string
    img_str = base64.b64encode(buf.getvalue())
    plt.close()
    return img_str


@with_gc
def get_weekday_pnl_chart(results):
    # Filter weekdays based on exclusions
    weekdays = [day[:3] for day in weekday_list]

    # Initialize a dictionary to hold summed PnL for each strategy and weekday
    summed_pnls = {
        strategy: {day: 0 for day in weekdays} for strategy in results.keys()
    }

    # Sum the PnL values for each strategy and weekday
    for strategy, df in results.items():
        for day in weekdays:
            summed_pnls[strategy][day] = df[df["Weekday"] == day]["Day PnL"].sum()

    # Prepare data for the bar chart
    x = np.arange(len(weekdays))  # the label locations
    width = 0.8 / len(results)

    fig, ax = plt.subplots(figsize=(10, 5))

    # Plot bars for each strategy
    for i, (strategy, pnl_dict) in enumerate(summed_pnls.items()):
        pnls = [pnl_dict[day] for day in weekdays]
        ax.bar(x + (i - (len(results) - 1) / 2) * width, pnls, width, label=strategy)

    # Add labels, title, and custom x-axis tick labels
    ax.set_ylabel("Total PnL")
    ax.set_title("PnL by Weekday")
    ax.set_xticks(x)
    ax.set_xticklabels(weekdays)
    ax.legend(
        loc="upper center", bbox_to_anchor=(0.5, -0.15), ncol=min(len(results), 4)
    )
    fig.subplots_adjust(bottom=0.2)
    plt.tight_layout()
    # buffer for saving data
    buf = BytesIO()
    plt.savefig(buf, dpi=150, bbox_inches="tight")
    buf.seek(0)
    # Convert PNG to base64 string
    img_str = base64.b64encode(buf.getvalue())
    plt.close()
    return img_str


def get_spx_gaps(start_date, end_date):
    start = start_date - dt.timedelta(
        10
    )  # make sure we get a few days before for calcs
    end = end_date + dt.timedelta(1)  # make sure we get the end date
    spx = yf.Ticker("^SPX")
    spx_history = spx.history(start=start, end=end, interval="1d")
    spx_history["Gap"] = spx_history["Open"] - spx_history["Close"].shift(1)
    spx_history["Gap%"] = spx_history["Gap"] / spx_history["Close"].shift(1) * 100
    return spx_history


def get_top_times(
    df_dict, strategy_settings, date: dt.datetime.date = None, top_n_override=0
) -> pd.DataFrame:
    portfolio_mode = "-SINGLE_MODE-" not in strategy_settings
    all_top_values = []
    top_n = 0
    # Iterate over each DataFrame in the dictionary
    for source, _df_dict in df_dict.items():
        strategy = "-SINGLE_MODE-" if not portfolio_mode else f"{source}.csv"
        try:
            settings = strategy_settings[strategy]
        except KeyError:
            # this is probably the separate put/call analysis we need to parse the source file
            strategy = f"{source.split('||')[1]}.csv"
            settings = strategy_settings[strategy]

        agg_type = "".join(word[0] for word in settings["-AGG_TYPE-"].split("-"))
        top_n = top_n_override if top_n_override else int(settings["-TOP_X-"])
        calc_type = settings["-CALC_TYPE-"]
        threshold = settings["-TOP_TIME_THRESHOLD-"] / 100
        df_orig = _df_dict["result_df"]

        if not date:
            df = df_orig.copy()
        else:
            date_timestamp = pd.Timestamp(date)
            if agg_type == "SM":
                # For semi-monthly, we need to check if the date is in the first or second half of the month
                if date_timestamp.day <= 15:
                    period_start = date_timestamp.replace(day=1)
                    period_end = date_timestamp.replace(day=15)
                else:
                    period_start = date_timestamp.replace(day=16)
                    period_end = date_timestamp.replace(
                        day=date_timestamp.days_in_month
                    )
                df = df_orig.loc[
                    (df_orig.index >= period_start) & (df_orig.index <= period_end), :
                ]
            else:
                period = pd.Period(date_timestamp, freq=agg_type)
                # df = df_orig.loc[df_orig.index == period, :]
                # this change allows to select the next available period in case the
                # current period is missing due to having some exclusions at that time.
                df = df_orig.loc[df_orig.index <= period, :].head(1)

        if df.index.name != "Date Range":
            df.set_index("Date Range", inplace=True)

        # Extract the first row of values
        try:
            if df.empty:
                continue
            first_row_values = df.iloc[0]
        except IndexError:
            # missing data for this month
            continue

        # Filter and sort the values in descending order and select the top n
        top_values = (
            first_row_values[first_row_values >= threshold]
            .sort_values(ascending=False)
            .head(top_n)
        )

        # Format values based on calc_type and add to the list of all top values
        for time, value in top_values.items():
            formatted_value = (
                f"{value:.2f}" if calc_type == "PnL" else f"{value * 100:.2f}%"
            )
            all_top_values.append(
                {
                    "Top Times": time,
                    "Values": formatted_value,
                    "Source": source,
                    "RawValue": value,  # Keep raw value for sorting
                }
            )

    # Convert the list to a DataFrame
    if all_top_values:
        result_df = pd.DataFrame(all_top_values)
    else:
        # empty
        result_df = pd.DataFrame(columns=["Top Times", "Values", "Source", "RawValue"])

    if not portfolio_mode:
        # Sort all values based on RawValue and select the overall top n
        result_df = result_df.loc[result_df.groupby("Top Times")["RawValue"].idxmax()]
        result_df = result_df.sort_values("RawValue", ascending=False).head(top_n)

    # Drop the RawValue column as it's no longer needed
    result_df = result_df.drop(columns=["RawValue"])

    return result_df


def import_news_events(filename) -> bool:
    global news_events
    """
    Import CSV downloaded from https://www.fxstreet.com/economic-calendar
    populates the dates for the releases in 'news_events' dict
    """

    def get_triple_witching_dates(
        start_year: int = 2000, end_year: int = dt.datetime.now().year
    ):
        """
        These are not in the calendar and must be calculated
        Triple witching ocurrs on the third friday of March, June, Sept, Dec
        """
        triple_witching_dates = []

        for year in range(start_year, end_year + 1):
            for month in [3, 6, 9, 12]:  # March, June, September, December
                # Get the first day of the month
                first_day = dt.datetime(year, month, 1)

                # Find the first Friday
                friday = first_day + dt.timedelta(
                    days=(4 - first_day.weekday() + 7) % 7
                )

                # Get the third Friday
                third_friday = friday + dt.timedelta(weeks=2)

                triple_witching_dates.append(third_friday.date())

        return triple_witching_dates

    def get_event(name):
        """
        Helper function to add news_event column to the df
        """
        keyword_dict = {
            "Consumer Price Index": "CPI",
            "Nonfarm Payrolls": "NFP",
            "ADP Employment": "ADP",
            "Initial Jobless Claims": "Initial Jobless Claims",
            "Retail Sales": "Retail Sales",
            "JOLT": "JOLT",
            "Unemployment": "Unemployment/NFP",
            "Producer Price Index": "PPI",
            "Gross Domestic Product": "GDP",
            "Personal Consumption Expenditures": "PCE",
            "Beige Book": "Beige Book",
            "ISM Manufacturing PMI": "ISM Manufacturing PMI",
            "ISM Services PMI": "ISM Services PMI",
            "Fed's Chair": "Fed Chair Speech",
            "FOMC Minutes": "FOMC Minutes",
            "Fed Interest Rate Decision": "FOMC",
            "Michigan Consumer Sentiment Index": "MI Consumer Sent.",
            "Chicago Purchasing": "Chicago PMI",
        }

        if "S&P" in name and "PMI" in name:
            return "S&P Global PMI"
        else:
            for keyword, event in keyword_dict.items():
                if keyword in name:
                    return event
            return ""

    # load csv, config dates and filter for US events
    try:
        df = pd.read_csv(filename)
    except Exception as e:
        return False
    if (
        "Start" not in df.columns
        or "Currency" not in df.columns
        or "Name" not in df.columns
    ):
        return False
    df.drop_duplicates(inplace=True)
    df["Start"] = pd.to_datetime(df["Start"])
    df = df[df["Currency"] == "USD"]
    df["news_event"] = df["Name"].apply(get_event)

    for news_event in news_events:
        if news_event == "Triple Witching":
            news_events[news_event] = get_triple_witching_dates()
        else:
            filtered_df = df[df["news_event"] == news_event]
            news_events[news_event] = sorted(filtered_df["Start"].dt.date.to_list())

    return True


def find_and_import_news_events():
    global news_events_loaded
    best_file = None
    max_rows = 0
    required_columns = set(["Id", "Start", "Name", "Impact", "Currency"])

    # Loop through all files in the current directory
    for filename in os.listdir("."):
        if filename.endswith(".csv"):
            try:
                # Try to read the CSV file
                df = pd.read_csv(filename)

                # Check if the required columns are present
                if set(df.columns) == required_columns:
                    rows = len(df)

                    # If this is the first valid file or has more rows than the previous best
                    if best_file is None or rows > max_rows:
                        best_file = filename
                        max_rows = rows
            except Exception as e:
                # If there's an error reading the file, skip it
                continue

    # If a valid file was found, import the news events
    if best_file:
        success = import_news_events(best_file)
        if success:
            news_events_loaded = True
            results_queue.put(
                ("-IMPORT_NEWS-", "News event list found and loaded sucessuflly!")
            )
            return
    results_queue.put(
        (
            "-IMPORT_NEWS-",
            "Could not locate news event csv.\nPlease select under options if needed",
        )
    )


def get_next_filename(path: str, base: str, ext: str) -> str:
    """
    Takes a path, base name, and extension.
    Checks if a filename already exists with that filename
    Adds (x) to the filename and returns the complete filename path
    """
    # Create filename
    filename = os.path.join(path, f"{base}{ext}")
    counter = 1
    while os.path.exists(filename):
        filename = os.path.join(path, f"{base}({counter}){ext}")
        counter += 1
    return filename


def is_BYOB_data(df: pd.DataFrame) -> bool:
    return df.columns[0] == "TradeID"


def load_data(
    file: str,
    weekday_exclusions: list = [],
) -> Tuple[pd.DataFrame, dt.datetime.date, dt.datetime.date]:
    """
    Takes a Trade Log CSV from either Option Omega or BYOB
    and returns a dataframe containing the trade data and
    the start and end dates of the dataset
    """
    # Load the CSV file
    try:
        delims = [",", ";", "\t", "|"]
        for delim in delims:
            df = pd.read_csv(file, delimiter=delim)
            if len(df.columns) > 1:
                break
        if len(df.columns) <= 1:
            # none of the delims worked
            raise UnicodeDecodeError
    except UnicodeDecodeError:
        sg.popup_no_border(
            "This does not appear to be a backtest results\nCSV from either OptionOmega"
            " or BYOB.\n\nPlease choose a different file"
        )
        return

    # remove duplicate rows in case human error in combining csv files
    df.drop_duplicates(inplace=True)

    # Determine which type of data, OptionOmega or BYOB
    is_byob = is_BYOB_data(df)
    if is_byob is None:
        sg.popup_no_border(
            "This does not appear to be a backtest results\nCSV from either OptionOmega"
            " or BYOB.\n\nPlease choose a different file"
        )
        return

    elif not is_byob:  # OO BT data
        # Convert 'Date Opened' to datetime format
        df["Date Opened"] = pd.to_datetime(df["Date Opened"])

        # Add EntryTime Column for analysis
        df["EntryTime"] = pd.to_datetime(
            df["Date Opened"].astype(str) + " " + df["Time Opened"]
        )

        # Add column for Option Right 'C' or 'P'
        df["OptionType"] = df["Legs"].apply(
            lambda x: x.split("|")[0].strip().split(" ")[4]
        )

    # Convert 'EntryTime' to datetime format
    df["EntryTime"] = pd.to_datetime(df["EntryTime"])

    # Add Day of week column
    df["Day of Week"] = df["EntryTime"].dt.day_name()

    # Create a 'Time' column
    df["Time"] = df["EntryTime"].dt.strftime("%H:%M:%S")

    # Sort by 'EntryTime'
    df.sort_values(["EntryTime"], inplace=True)

    # Determine start and end dates
    start_date = df["EntryTime"].min().date()
    end_date = df["EntryTime"].max().date()

    # Add temporary Date column for merging gap info
    df["Date"] = df["EntryTime"].dt.date

    # Get SPX historical open/close from yahoo finance and calc gaps
    spx_history = get_spx_gaps(start_date, end_date)
    if not spx_history.empty:
        spx_history = spx_history.reset_index()  # Reset index to make 'Date' a column
        spx_history["Date"] = spx_history["Date"].dt.date

        # drop the rows from spx_history that are not in df
        spx_history = spx_history[spx_history["Date"].isin(df["Date"].to_list())]

        # remove already present gap column from OO data
        df = df.drop(columns=["Gap"], errors="ignore")

        # Merge SPX gap information with the main dataframe
        df = pd.merge(df, spx_history[["Date", "Gap", "Gap%"]], on="Date", how="left")

    # Remove the temporary "Date" column if not needed
    df = df.drop(columns=["Date"])

    return (
        df[~df["Day of Week"].isin(weekday_exclusions)],
        start_date,
        end_date,
    )


def resize_image(image_path, size):
    """Resize the image to the specified size."""
    img = Image.open(image_path)
    img = img.resize(size, Image.LANCZOS)
    buf = BytesIO()
    img.save(buf, format="PNG")
    return buf.getvalue()


def resize_base64_image(base64_image, desired_height):
    # Decode the base64 string
    image_data = base64.b64decode(base64_image)

    # Open the image
    image = Image.open(BytesIO(image_data))
    # Calculate the scaling factor
    scale_factor = desired_height / image.height

    # Calculate new dimensions
    new_width = int(image.width * scale_factor)
    new_height = desired_height

    # Resize the image
    resized_image = image.resize((new_width, new_height), Image.LANCZOS)
    # Save the resized image to a bytes buffer
    buf = BytesIO()
    resized_image.save(buf, format="PNG")

    # Encode the resized image to base64
    return base64.b64encode(buf.getvalue())


@with_gc
def run_analysis_threaded(
    files_list,
    strategy_settings,
    open_files,
):
    # initialize df_dicts
    df_dicts = {}

    for file in files_list:
        strategy = (
            "-SINGLE_MODE-"
            if "-SINGLE_MODE-" in strategy_settings
            else os.path.basename(file)
        )
        settings = strategy_settings[strategy]
        result_dicts = create_excel_file(file, settings, open_files)

        # check for cancel flag to stop thread
        if cancel_flag.is_set():
            cancel_flag.clear()
            results_queue.put(("-BACKTEST_CANCELED-", ""))
            return

        source = os.path.splitext(os.path.basename(file))[0]
        for right_type, day_dict in result_dicts.items():
            if right_type not in df_dicts:
                df_dicts[right_type] = {
                    "All": {},
                    "Mon": {},
                    "Tue": {},
                    "Wed": {},
                    "Thu": {},
                    "Fri": {},
                }
            for day, df_dict in day_dict.items():
                df_dicts[right_type][day][source] = df_dict

    for _best in ["Best P/C", "Best P/C Gap Up", "Best P/C Gap Down"]:
        df_dicts[_best] = {
            "All": {},
            "Mon": {},
            "Tue": {},
            "Wed": {},
            "Thu": {},
            "Fri": {},
        }

        # combine the put and call dfs into 1 dict for dertmining the best time
        # from among both individual datasets
        for _right in ["Puts", "Calls"]:
            if _best.endswith("Gap Up"):
                _right += " Gap Up"
            elif _best.endswith("Gap Down"):
                _right += " Gap Down"

            if _right in df_dicts:
                for _day, _day_dict in df_dicts[_right].items():
                    for _source, _df_dict in _day_dict.items():
                        df_dicts[_best][_day][
                            f"{_right.removesuffix("s")}||{_source}"
                        ] = _df_dict

    results_queue.put(("-RUN_ANALYSIS_END-", df_dicts))
    return df_dicts


def save_settings(settings, settings_filename, values):
    for key in settings:
        settings[key] = values[key]
    os.makedirs(os.path.dirname(settings_filename), exist_ok=True)
    with open(settings_filename, "w") as f:
        json.dump(settings, f, indent=4)


def set_default_app_settings(app_settings):
    # Setup defaults if setting did not load/exist
    if "-THEME-" not in app_settings:
        app_settings["-THEME-"] = "Light"
    if "-AVG_PERIOD_1-" not in app_settings:
        app_settings["-AVG_PERIOD_1-"] = "4"
    if "-AVG_PERIOD_2-" not in app_settings:
        app_settings["-AVG_PERIOD_2-"] = "8"
    if "-PERIOD_1_WEIGHT-" not in app_settings:
        app_settings["-PERIOD_1_WEIGHT-"] = "25"
    if "-PERIOD_2_WEIGHT-" not in app_settings:
        app_settings["-PERIOD_2_WEIGHT-"] = "75"
    if "-TOP_X-" not in app_settings:
        app_settings["-TOP_X-"] = "5"
    if "-CALC_TYPE-" not in app_settings:
        app_settings["-CALC_TYPE-"] = "PCR"
    if "-AGG_TYPE-" not in app_settings:
        app_settings["-AGG_TYPE-"] = "Monthly"
    if "-OPEN_FILES-" not in app_settings:
        app_settings["-OPEN_FILES-"] = False
    if "-BACKTEST-" not in app_settings:
        app_settings["-BACKTEST-"] = False
    if "-START_VALUE-" not in app_settings:
        app_settings["-START_VALUE-"] = "100000"
    if "-START_DATE-" not in app_settings:
        app_settings["-START_DATE-"] = ""
    if "-END_DATE-" not in app_settings:
        app_settings["-END_DATE-"] = ""
    if "-EXPORT-" not in app_settings:
        app_settings["-EXPORT-"] = False
    if "-EXPORT_OO_SIG-" not in app_settings:
        app_settings["-EXPORT_OO_SIG-"] = False
    if "-SCALING-" not in app_settings:
        app_settings["-SCALING-"] = False
    if "-MIN_TRANCHES-" not in app_settings:
        app_settings["-MIN_TRANCHES-"] = "5"
    if "-MAX_TRANCHES-" not in app_settings:
        app_settings["-MAX_TRANCHES-"] = "5"
    if "-BP_PER-" not in app_settings:
        app_settings["-BP_PER-"] = "6000"
    if "-PORTFOLIO_MODE-" not in app_settings:
        app_settings["-PORTFOLIO_MODE-"] = False
    if "-TOP_TIME_THRESHOLD-" not in app_settings:
        app_settings["-TOP_TIME_THRESHOLD-"] = ""


def update_strategy_settings(values, settings):
    settings.update(
        {
            "-AVG_PERIOD_1-": values["-AVG_PERIOD_1-"],
            "-PERIOD_1_WEIGHT-": values["-PERIOD_1_WEIGHT-"],
            "-AVG_PERIOD_2-": values["-AVG_PERIOD_2-"],
            "-PERIOD_2_WEIGHT-": values["-PERIOD_2_WEIGHT-"],
            "-TOP_X-": values["-TOP_X-"],
            "-CALC_TYPE-": values["-CALC_TYPE-"],
            "-AGG_TYPE-": values["-AGG_TYPE-"],
            "-MIN_TRANCHES-": values["-MIN_TRANCHES-"],
            "-MAX_TRANCHES-": values["-MAX_TRANCHES-"],
            "-BP_PER-": values["-BP_PER-"],
            "-PASSTHROUGH_MODE-": values["-PASSTHROUGH_MODE-"],
            "-PORT_WEIGHT-": values["-PORT_WEIGHT-"],
            "-TOP_TIME_THRESHOLD-": values["-TOP_TIME_THRESHOLD-"],
        }
    )

    # Initialize option settings if they don't exist
    for option in [
        "-WEEKDAY_EXCLUSIONS-",
        "-NEWS_EXCLUSIONS-",
        "-PUT_OR_CALL-",
        "-IDV_WEEKDAY-",
        "-AUTO_EXCLUSIONS-",
        "-GAP_ANALYSIS-",
    ]:
        if option not in settings:
            settings[option] = []
    if "-APPLY_EXCLUSIONS-" not in settings:
        settings["-APPLY_EXCLUSIONS-"] = "Both"
    if "-GAP_THRESHOLD-" not in settings:
        settings["-GAP_THRESHOLD-"] = 0
    if "-GAP_TYPE-" not in settings:
        settings["-GAP_TYPE-"] = "%"


def validate_strategy_settings(strategy_settings):
    for strategy in strategy_settings:
        try:
            period1 = int(strategy_settings[strategy]["-AVG_PERIOD_1-"])
            period2 = int(strategy_settings[strategy]["-AVG_PERIOD_2-"])
            weight1 = float(strategy_settings[strategy]["-PERIOD_1_WEIGHT-"])
            weight2 = float(strategy_settings[strategy]["-PERIOD_2_WEIGHT-"])
            strategy_settings[strategy]["-AVG_PERIOD_1-"] = period1
            strategy_settings[strategy]["-AVG_PERIOD_2-"] = period2
            strategy_settings[strategy]["-PERIOD_1_WEIGHT-"] = weight1
            strategy_settings[strategy]["-PERIOD_2_WEIGHT-"] = weight2

            strategy_settings[strategy]["-TOP_X-"] = int(
                strategy_settings[strategy]["-TOP_X-"]
            )
            strategy_settings[strategy]["-MIN_TRANCHES-"] = int(
                strategy_settings[strategy]["-MIN_TRANCHES-"]
            )
            strategy_settings[strategy]["-MAX_TRANCHES-"] = int(
                strategy_settings[strategy]["-MAX_TRANCHES-"]
            )
            strategy_settings[strategy]["-BP_PER-"] = float(
                strategy_settings[strategy]["-BP_PER-"]
            )
            strategy_settings[strategy]["-PORT_WEIGHT-"] = float(
                strategy_settings[strategy]["-PORT_WEIGHT-"]
            )
            if strategy_settings[strategy]["-TOP_TIME_THRESHOLD-"]:
                strategy_settings[strategy]["-TOP_TIME_THRESHOLD-"] = float(
                    strategy_settings[strategy]["-TOP_TIME_THRESHOLD-"]
                )
            else:
                strategy_settings[strategy]["-TOP_TIME_THRESHOLD-"] = float("-inf")
        except ValueError:
            return (
                "Problem with values entered.\nPlease enter only positive whole numbers"
            )
        if period1 < 1 or period2 < 1 or period1 > period2:
            return "Please make sure both averaging periods are > 0\nand that Trailing Avg 2 is >= to Trailing Avg 1"
        if weight1 + weight2 != 100:
            return "Trailing Avg Weights should add up to 100"

    return True


@with_gc
def walk_forward_test(
    df_dicts: dict,
    path: str,
    strategy_settings: dict,
    start: dt.datetime.date = None,
    end: dt.datetime.date = None,
    initial_value: float = 100_000,
    use_scaling=False,
    export_trades=False,
    export_OO_sig=False,
):
    portfolio_mode = "-SINGLE_MODE-" not in strategy_settings
    start_date = dt.date.min
    passthrough_start_date = dt.date.min
    end_date = dt.date.max
    # loop through all the source dfs
    for source, df_dict in df_dicts["Put-Call Comb"]["All"].items():
        try:
            passthrough = strategy_settings[f"{source}.csv"]["-PASSTHROUGH_MODE-"]
        except KeyError as e:
            passthrough = False

        _start_date = df_dict["org_df"]["EntryTime"].min().date()
        _end_date = df_dict["org_df"]["EntryTime"].max().date()
        # find the latest start date
        if not passthrough:
            if _start_date > start_date:
                start_date = _start_date
        else:
            # we need to treat passthrough seperate since there is no
            # warm up period necessary.
            if _start_date > passthrough_start_date:
                passthrough_start_date = _start_date

        # find the earliest end date passthrough doesn't matter here
        if _end_date < end_date:
            end_date = _end_date

    max_long_avg_period = max(
        [
            max(settings["-AVG_PERIOD_1-"], settings["-AVG_PERIOD_2-"])
            for settings in strategy_settings.values()
        ]
    )
    date_adv = start_date + relativedelta(months=max_long_avg_period)
    warm_start = dt.date(date_adv.year, date_adv.month, 1)
    # use either the user input date or the first warmed up date
    if start:
        start_test_date = max(warm_start, start)
    else:
        start_test_date = warm_start
    end = end_date if end is None else end

    # check if any strats are using auto exclusion
    warm_up_date = start_test_date
    using_auto_exclusions = False
    for setting in strategy_settings.values():
        if setting["-AUTO_EXCLUSIONS-"]:
            # set the warmup date
            warm_up_date = warm_start + relativedelta(months=max_long_avg_period)
            using_auto_exclusions = True
            break
    # now we just need to see if the passthrough strats start later
    warm_up_date = max(warm_up_date, passthrough_start_date)

    if not portfolio_mode:
        settings = strategy_settings["-SINGLE_MODE-"]
        strats = ["All-P_C_Comb"]
        if settings["-PUT_OR_CALL-"] and settings["-IDV_WEEKDAY-"]:
            strats += ["Weekday-P_C_Comb", "All-Best_P_or_C", "Weekday-Best_P_or_C"]
        elif settings["-IDV_WEEKDAY-"]:
            strats.append("Weekday-P_C_Comb")
        elif settings["-PUT_OR_CALL-"]:
            strats.append("All-Best_P_or_C")
        if settings["-GAP_ANALYSIS-"]:
            for _strat in strats.copy():
                strats.append(f"{_strat}-Gap")
    else:
        strats = ["Portfolio"] + list(strategy_settings.keys())

    portfolio_metrics = {}
    for _strat in strats:
        portfolio_metrics[_strat] = {
            "Current Value": initial_value,
            "Highest Value": initial_value,
            "Max DD": 0.0,
            "Current DD": 0.0,
            "DD Days": 0,
            "Tranche Qtys": [],
            "Port Tranche Qtys": [],
            "Num Tranches": 1,
            "Port Num Tranches": 1,
            "trade log": pd.DataFrame(),
            "Tlog Auto Exclusions": (
                pd.DataFrame()
            ),  # for warm-up to calc EV for auto exclusions
            "Win Streak": 0,
            "Loss Streak": 0,
        }

    if portfolio_mode:
        port_dict = portfolio_metrics["Portfolio"]

    # init results
    results = {}
    for strategy in portfolio_metrics:
        results[strategy] = pd.DataFrame()

    # convert weekdays from full day name to short name. i.e. Monday to Mon
    day_list = [_day[:3] for _day in weekday_list]

    def determine_auto_skip(date: dt.date, tlog: pd.DataFrame, agg_type: str) -> bool:
        """
        Calculate the expected value of any news events that
        occur on the given date and return True if negative expectancy
        """
        current_weekday = date.strftime("%a")
        agg_type = (
            "ME"
            if agg_type == "Monthly"
            else "SME" if agg_type == "Semi-Monthly" else "W-SAT"
        )
        trade_log = tlog.copy()
        trade_log["EntryTime"] = pd.to_datetime(trade_log["EntryTime"])
        if is_BYOB_data(trade_log):
            trade_log["P/L"] = (
                trade_log["ProfitLossAfterSlippage"] * 100 - trade_log["CommissionFees"]
            )

        def _get_current_rolling_avg(df):
            # Set 'EntryTime' as the index
            df = df.set_index("EntryTime")
            # Resample to monthly or weekly frequency, summing the PNL
            aggregated_pnl = df["P/L"].resample(agg_type).sum()
            # Calculate the rolling average
            window = (
                max_long_avg_period
                if agg_type == "ME"
                else (
                    int(max_long_avg_period * 2)
                    if agg_type == "SME"
                    else int(max_long_avg_period * 4.33)
                )
            )
            rolling_avg_pnl = aggregated_pnl.rolling(
                window=window, min_periods=1
            ).mean()
            if not rolling_avg_pnl.empty:
                return rolling_avg_pnl.iloc[-1]
            else:
                return 0

        # find the events that occur on this date and calc the expectancy
        for event, date_list in news_events.items():
            if date in date_list:
                trade_log_filtered = trade_log[
                    trade_log["EntryTime"].dt.date.isin(date_list)
                ]
                if not trade_log_filtered.empty:
                    current_avg = _get_current_rolling_avg(trade_log_filtered)
                    if current_avg < 0:
                        # this event has negative expectancy, whole day can be skipped
                        return True

        # passed all news events, lets see if we skip the weekday
        trade_log_filtered = trade_log[
            trade_log["Day of Week"].str.contains(current_weekday)
        ]
        if not trade_log_filtered.empty:
            current_avg = _get_current_rolling_avg(trade_log_filtered)
            if current_avg < 0:
                # this dat has negative expectancy, whole day can be skipped
                return True
        return False

    if using_auto_exclusions:
        current_date = warm_start
    else:
        current_date = max(start_test_date, passthrough_start_date)

    # determine if we need to use gaps
    spx_history = pd.DataFrame()
    for setting in strategy_settings.values():
        if setting["-GAP_ANALYSIS-"]:
            spx_history = get_spx_gaps(current_date, end)
            if not spx_history.empty:
                # reset the index to just the date, dropping the time component
                spx_history = spx_history.reset_index()
                spx_history["Date"] = spx_history["Date"].dt.date
                spx_history = spx_history.set_index("Date")

    while current_date <= end:
        # check for cancel flag to stop thread
        if cancel_flag.is_set():
            cancel_flag.clear()
            results_queue.put(("-BACKTEST_CANCELED-", ""))
            return

        warmed_up = current_date >= warm_up_date

        if portfolio_mode:
            # reset daily pnl for portfolio
            port_dict["Current Day PnL"] = 0

        current_weekday = current_date.strftime("%a")
        for strat, strat_dict in portfolio_metrics.items():
            if portfolio_mode and strat == "Portfolio":
                # we don't trade the portfolio, it is just the combination of all individual strats
                continue
            elif portfolio_mode:
                settings = strategy_settings[strat]
            else:
                settings = strategy_settings["-SINGLE_MODE-"]

            # reset daily pnl for individual strategy
            strat_dict["Current Day PnL"] = 0

            day_exlusions = []
            news_date_exclusions = []
            if settings["-APPLY_EXCLUSIONS-"] != "Analysis":
                # we are applying exclusions to either the WF test or both the WF and Analysis
                day_exlusions = [_day[:3] for _day in settings["-WEEKDAY_EXCLUSIONS-"]]
                # get list of news event dates to skip.
                for release, date_list in news_events.items():
                    if release in settings["-NEWS_EXCLUSIONS-"]:
                        news_date_exclusions += date_list

            skip_day = False
            if warmed_up and using_auto_exclusions:
                skip_day = determine_auto_skip(
                    current_date,
                    strat_dict["Tlog Auto Exclusions"],
                    settings["-AGG_TYPE-"],
                )
            elif (
                current_weekday in day_exlusions
                or current_weekday not in day_list
                or current_date in news_date_exclusions
            ):
                skip_day = True

            if not settings["-PASSTHROUGH_MODE-"]:
                if use_scaling:

                    def determine_num_tranches(
                        min_tranches, max_tranches, num_contracts
                    ):
                        tranches = max_tranches
                        while True:
                            if num_contracts > tranches:
                                max_tranche_qty = int(num_contracts / tranches)
                                remain_qty = num_contracts - (
                                    tranches * max_tranche_qty
                                )
                                if remain_qty >= min_tranches or remain_qty == 0:
                                    # we're done we can stay at this number of tranches with
                                    # the remainder filling up another set of at least min tranches
                                    return tranches
                                else:
                                    # we need to take a tranche away so we can try to fill up at
                                    # least 1 full set at min amount
                                    if tranches - 1 < min_tranches:
                                        # we can't reduce any further, got with what we have
                                        # even if that means we will be adding contracts below the min
                                        return tranches
                                    else:
                                        tranches -= 1
                            else:
                                return num_contracts

                    def determine_tranche_qtys(tranches):
                        tranche_qtys = []
                        for x in range(tranches):
                            if x < num_contracts % tranches:
                                # this is where we add the remaining contracts after filling up all tranches
                                tranche_qtys.append(int(num_contracts / tranches) + 1)
                            else:
                                tranche_qtys.append(int(num_contracts / tranches))
                        return tranche_qtys

                    min_tranches = settings["-MIN_TRANCHES-"]
                    max_tranches = settings["-MAX_TRANCHES-"]
                    bp_per_contract = settings["-BP_PER-"]
                    num_contracts = int(strat_dict["Current Value"] / bp_per_contract)
                    tranches = determine_num_tranches(
                        min_tranches, max_tranches, num_contracts
                    )
                    strat_dict["Num Tranches"] = tranches
                    strat_dict["Tranche Qtys"] = determine_tranche_qtys(tranches)
                    if portfolio_mode:
                        weighted_value = (
                            port_dict["Current Value"] * settings["-PORT_WEIGHT-"] / 100
                        )
                        num_contracts = int(weighted_value / bp_per_contract)
                        tranches = determine_num_tranches(
                            min_tranches, max_tranches, num_contracts
                        )
                        strat_dict["Port Num Tranches"] = tranches
                        strat_dict["Port Tranche Qtys"] = determine_tranche_qtys(
                            tranches
                        )
                else:
                    # not scaling
                    num_contracts = settings["-TOP_X-"]
                    strat_dict["Num Tranches"] = num_contracts
                    strat_dict["Tranche Qtys"] = [1 for x in range(num_contracts)]
                    strat_dict["Port Num Tranches"] = num_contracts
                    strat_dict["Port Tranche Qtys"] = [1 for x in range(num_contracts)]

            if settings["-AGG_TYPE-"] == "Monthly":
                # date for best times should be the month prior as we don't know the future yet
                best_time_date = current_date - relativedelta(months=1)
            elif settings["-AGG_TYPE-"] == "Semi-Monthly":
                # grab from last half-month
                if current_date.day != 31:
                    best_time_date = current_date - relativedelta(days=15)
                else:
                    best_time_date = current_date - relativedelta(days=16)
            else:
                # grab from last week
                best_time_date = current_date - relativedelta(weeks=1)

            def log_pnl_and_trades(strat_dict, num_tranches, tranche_qtys):
                # determine gap info
                gap_str = ""
                if settings["-GAP_ANALYSIS-"]:
                    _gap_type = "Gap%" if settings["-GAP_TYPE-"] == "%" else "Gap"
                    try:
                        gap_value = spx_history.at[current_date, _gap_type]
                    except KeyError as e:
                        # probably a day market was not open (i.e. holiday)
                        gap_value = 0
                    if gap_value > settings["-GAP_THRESHOLD-"]:
                        gap_str = " Gap Up"
                    elif gap_value < -settings["-GAP_THRESHOLD-"]:
                        gap_str = " Gap Down"

                if portfolio_mode:
                    # determine which strat to use
                    if settings["-PUT_OR_CALL-"]:
                        _strat = "Best P/C"
                    else:
                        _strat = "Put-Call Comb"

                    _strat = _strat + gap_str  # add gap info onto the end of strat name

                    # determine which weekday to use
                    if settings["-IDV_WEEKDAY-"]:
                        _weekday = current_weekday
                    else:
                        _weekday = "All"

                else:
                    # determine strat name for df_dicts
                    if "P_C_Comb" in strat:
                        _strat = "Put-Call Comb"
                    else:
                        _strat = "Best P/C"

                    # determine gap type
                    if "Gap" not in strat:
                        gap_str = ""

                    _strat = _strat + gap_str  # add gap onto the end of strat name

                    # determine weekday type
                    if strat.startswith("All"):
                        _weekday = "All"
                    else:
                        _weekday = current_weekday

                # finally select the appropriate df_dict
                df_dict = df_dicts[_strat][_weekday]

                # get the best times for this strat
                best_times_df = get_top_times(
                    df_dict, strategy_settings, best_time_date, num_tranches
                )

                if portfolio_mode:
                    # filter out other sources since all sources are included
                    source = os.path.splitext(strat)[0]
                    best_times_df = (
                        best_times_df[best_times_df["Source"].str.endswith(source)]
                        .sort_values("Values", ascending=False)
                        .head(num_tranches)
                    )

                if settings["-PASSTHROUGH_MODE-"]:
                    # get all the times this traded on this date
                    source_df = df_dicts["Put-Call Comb"]["All"][source]["org_df"]
                    _filtered_df = source_df[
                        source_df["EntryTime"].dt.date == current_date
                    ]
                    best_times = (
                        _filtered_df["EntryTime"]
                        .dt.strftime("%H:%M:%S")
                        .unique()
                        .tolist()
                    )
                    # we don't determine the tranche qtys in passthrough mode, we just need
                    # to trade whaterver is in the trade log for that day.  Let's determine
                    # the qtys to trade for each trade in the log.
                    tranche_qtys = []
                    for _ in best_times:
                        if use_scaling:
                            current_value = strat_dict["Current Value"]
                            # calc total qty
                            total_qty = (
                                current_value
                                * settings["-PORT_WEIGHT-"]
                                / 100
                                / settings["-BP_PER-"]
                            )

                            # qty per trade
                            qty = int(total_qty / len(best_times))
                            tranche_qtys.append(max(qty, 1))
                        else:
                            tranche_qtys.append(1)
                else:  # no passthrough, use best times analysis
                    best_times = best_times_df["Top Times"].to_list()

                for time in best_times:
                    # get the qty for this tranche time
                    qty = tranche_qtys[best_times.index(time)]
                    full_dt = dt.datetime.combine(
                        current_date, dt.datetime.strptime(time, "%H:%M:%S").time()
                    )

                    if not settings["-PASSTHROUGH_MODE-"]:
                        # get the source df, we already have it from eariler for pass-through
                        source = best_times_df.loc[
                            best_times_df["Top Times"] == time, "Source"
                        ].values[0]
                        source_df = df_dict[source]["org_df"]

                    filtered_rows = source_df[source_df["EntryTime"] == full_dt].copy()

                    if filtered_rows.empty:
                        continue

                    filtered_rows["qty"] = qty
                    filtered_rows["source"] = source

                    if is_BYOB_data(source_df):
                        gross_pnl = (
                            filtered_rows["ProfitLossAfterSlippage"].sum() * 100 * qty
                        )
                        commissions = filtered_rows["CommissionFees"].sum() * qty
                        pnl = gross_pnl - commissions
                    else:
                        pnl = filtered_rows["P/L"].sum() * qty

                    # log trade
                    strat_dict["Tlog Auto Exclusions"] = pd.concat(
                        [strat_dict["Tlog Auto Exclusions"], filtered_rows],
                        ignore_index=True,
                    )
                    if warmed_up and not skip_day:
                        strat_dict["trade log"] = pd.concat(
                            [strat_dict["trade log"], filtered_rows], ignore_index=True
                        )
                        strat_dict["Current Value"] += pnl
                        strat_dict["Current Day PnL"] += pnl

            if current_weekday in day_list:
                # make sure its not the weekend
                num_tranches = strat_dict["Num Tranches"]
                tranche_qtys = strat_dict["Tranche Qtys"]
                log_pnl_and_trades(strat_dict, num_tranches, tranche_qtys)
                if portfolio_mode:
                    num_tranches = strat_dict["Port Num Tranches"]
                    tranche_qtys = strat_dict["Port Tranche Qtys"]
                    log_pnl_and_trades(port_dict, num_tranches, tranche_qtys)

            def calc_metrics(strat_dict: dict, strat: str, results: dict) -> None:
                # calc metrics and log the results for the day
                if strat_dict["Current Value"] >= strat_dict["Highest Value"]:
                    strat_dict["Highest Value"] = strat_dict["Current Value"]
                    strat_dict["DD Days"] = 0
                else:
                    # we are in Drawdown
                    dd = (
                        strat_dict["Highest Value"] - strat_dict["Current Value"]
                    ) / strat_dict["Highest Value"]
                    strat_dict["Current DD"] = dd
                    if dd > strat_dict["Max DD"]:
                        strat_dict["Max DD"] = dd
                    strat_dict["DD Days"] += 1

                if strat_dict["Current Day PnL"] > 0:
                    strat_dict["Win Streak"] += 1
                    strat_dict["Loss Streak"] = 0
                elif strat_dict["Current Day PnL"] < 0:
                    # tie does not change any streak
                    strat_dict["Win Streak"] = 0
                    strat_dict["Loss Streak"] += 1

                new_row = pd.DataFrame(
                    [
                        {
                            "Date": current_date,
                            "Current Value": strat_dict["Current Value"],
                            "Highest Value": strat_dict["Highest Value"],
                            "Max DD": strat_dict["Max DD"],
                            "Current DD": strat_dict["Current DD"],
                            "DD Days": strat_dict["DD Days"],
                            "Day PnL": strat_dict["Current Day PnL"],
                            "Win Streak": strat_dict["Win Streak"],
                            "Loss Streak": strat_dict["Loss Streak"],
                            "Initial Value": initial_value,
                            "Weekday": current_weekday,
                        }
                    ]
                )
                results[strat] = pd.concat([results[strat], new_row], ignore_index=True)

            if warmed_up and not skip_day:
                calc_metrics(strat_dict, strat, results)

            if skip_day:
                # this is a skip day just increment the DD days if needed
                if strat_dict["DD Days"] > 0:
                    strat_dict["DD Days"] += 1
                if portfolio_mode and port_dict["DD Days"] > 0:
                    port_dict["DD Days"] += 1

        # calculate all the stats for the portfolio now that all other strats have traded
        if portfolio_mode and warmed_up and not skip_day:
            calc_metrics(port_dict, "Portfolio", results)

        current_date += dt.timedelta(1)

    for strat in portfolio_metrics:
        if not results[strat].empty:
            results[strat]["Date"] = pd.to_datetime(results[strat]["Date"])
            uuid_str = str(uuid.uuid4())[:8]
            if export_trades:
                base_filename = f"{strat} - TradeLog_{uuid_str}"
                ext = ".csv"
                export_filename = get_next_filename(path, base_filename, ext)
                portfolio_metrics[strat]["trade log"].to_csv(
                    export_filename, index=False
                )
            if export_OO_sig:
                base_filename = f"{strat} - OO_Signal_File_{uuid_str}"
                ext = ".csv"
                export_filename = get_next_filename(path, base_filename, ext)
                export_oo_sig_file(
                    portfolio_metrics[strat]["trade log"], export_filename
                )
    results_queue.put(("-BACKTEST_END-", results))
    return results


@with_gc
def options_window(settings) -> None:
    global news_events_loaded
    dpi_scale = get_dpi_scale()
    BASE_HEIGHT = 40
    scaled_height = int(BASE_HEIGHT * dpi_scale)
    weekday_exclusion_checkboxes = [
        Checkbox(
            day,
            day in settings["-WEEKDAY_EXCLUSIONS-"],
            key=day,
            font=font,
            size=(6, 1),
        )
        for day in weekday_list
    ]
    news_exclusion_checkboxes = [
        Checkbox(
            release,
            release in settings["-NEWS_EXCLUSIONS-"],
            key=release,
            font=font,
            size=(11, 1),
        )
        for release in news_events
    ]
    # break into rows of 3
    news_exclusion_checkboxes = chunk_list(news_exclusion_checkboxes, 3)
    fxstreet_link = "https://www.fxstreet.com/economic-calendar"
    donate_paypal_link = "https://www.paypal.com/donate?hosted_button_id=ZDZEXUHMZR9RJ"
    donate_venmo_link = "https://www.venmo.com/u/excessivechaos"
    layout = [
        [
            sg.Text("Economic Calendar CSV file (", pad=(0, 0)),
            sg.Text(
                fxstreet_link,
                pad=(0, 0),
                enable_events=True,
                font=font + ("underline",),
                text_color="blue",
                key=("-LINK-", fxstreet_link),
            ),
            sg.Text(")", pad=(0, 0)),
        ],
        [
            sg.Input(
                "Loaded" if news_events_loaded else "",
                key="-FILE-",
                expand_x=True,
            ),
            sg.Button("Browse"),
        ],
        [
            sg.Frame(
                "Exclude Weekday",
                [weekday_exclusion_checkboxes],
                expand_x=True,
            ),
        ],
        [
            sg.Frame(
                "Exclude news",
                news_exclusion_checkboxes,
                expand_x=True,
            ),
        ],
        [
            sg.Frame(
                "Analysis Options",
                [
                    [
                        sg.Text("Apply Exclusions to:", pad=((5, 1), 5)),
                        sg.Combo(
                            ["Both", "Analysis", "Walk Forward Test"],
                            settings["-APPLY_EXCLUSIONS-"],
                            key="-APPLY_EXCLUSIONS-",
                            font=font,
                            tooltip="Apply the excluded events/weekdays to the analysis\nof best times, or just the walk-forward test, or both.",
                            pad=(0, 5),
                            readonly=True,
                        ),
                    ],
                    [
                        Checkbox(
                            "Put or Call",
                            settings["-PUT_OR_CALL-"],
                            key="-PUT_OR_CALL-",
                            font=font,
                            size=(6, 1),
                            tooltip="Compare selecting the best times to trade only puts or calls",
                        ),
                        Checkbox(
                            "Individual Weekday",
                            settings["-IDV_WEEKDAY-"],
                            key="-IDV_WEEKDAY-",
                            font=font,
                            size=(10, 1),
                            tooltip="Compare selecting the best times for each specific weekday to trade for that weekday",
                        ),
                        Checkbox(
                            "Auto Exclusions",
                            settings["-AUTO_EXCLUSIONS-"],
                            key="-AUTO_EXCLUSIONS-",
                            font=font,
                            size=(10, 1),
                            pad=(5, 5),
                            tooltip="Allow Walk-Forward test to determine which events to exclude\nbased on whether the event has -EV from prior lookback period.\nNote: This will require an additional warmup period.",
                        ),
                    ],
                    [sg.HorizontalSeparator()],
                    [
                        Checkbox(
                            "Use Gap Analysis",
                            settings["-GAP_ANALYSIS-"],
                            key="-GAP_ANALYSIS-",
                            font=font,
                            size=(10, 1),
                            tooltip="Look for the best times for gap up and down days",
                        ),
                        sg.Text("Threshold:"),
                        sg.Input(
                            settings["-GAP_THRESHOLD-"],
                            size=(5, 1),
                            key="-GAP_THRESHOLD-",
                        ),
                        sg.Combo(
                            ["%", "Points"],
                            settings["-GAP_TYPE-"],
                            readonly=True,
                            key="-GAP_TYPE-",
                        ),
                    ],
                ],
                expand_x=True,
            ),
        ],
        [
            sg.Ok(),
            sg.Cancel(),
            sg.Push(),
            sg.Button(
                image_data=resize_base64_image(
                    donate_paypal_logo, int(scaled_height * 1.5)
                ),
                button_color=sg.theme_background_color(),
                border_width=0,
                key=("-LINK-", donate_paypal_link),
                pad=(0, 0),
            ),
            sg.Button(
                image_data=resize_base64_image(donate_venmo_logo, scaled_height),
                button_color=sg.theme_background_color(),
                border_width=0,
                key=("-LINK-", donate_venmo_link),
                pad=(0, 0),
            ),
        ],
    ]

    window = sg.Window(
        "Options",
        layout,
        no_titlebar=False,
        # size=window_size,
        finalize=True,
        modal=True,
        resizable=True,
    )
    Checkbox.initial(window)
    # let window be made so the length is auto set
    # the width always fills the screen when using the custom
    # checkbox class, so we need to change the size.  Allowing
    # the window to self size first we can get the correct height
    window_height = window.size[1]
    window_width = int(650 * dpi_scale)
    window.TKroot.geometry(f"{window_width}x{window_height}")

    # Now we need to move the window since it opens all the way left.
    # We will position it at the cursor location since the options button is on the right
    mouse_x = window.TKroot.winfo_pointerx()
    mouse_y = window.TKroot.winfo_pointery()
    x_cordinate = mouse_x - window_width
    y_cordinate = mouse_y

    # Ensure the window is fully visible
    x_cordinate = max(0, min(x_cordinate, screen_size[0] - window_width))
    y_cordinate = max(0, min(y_cordinate, screen_size[1] - window_height))

    # Set the window position
    window.TKroot.geometry(f"+{x_cordinate}+{y_cordinate}")

    while True:
        event, values = window.read()
        if event in (sg.WIN_CLOSED, "Cancel"):
            break

        elif event == "Browse":
            news_file = sg.popup_get_file(
                "",
                file_types=(("CSV Files", "*.csv"),),
                multiple_files=False,
                no_window=True,
            )
            window["-FILE-"].update(news_file)

        elif event == "Ok":
            settings["-WEEKDAY_EXCLUSIONS-"] = [
                day for day in weekday_list if values[day]
            ]
            settings["-NEWS_EXCLUSIONS-"] = [
                release for release in news_events if values[release]
            ]
            settings["-PUT_OR_CALL-"] = values["-PUT_OR_CALL-"]
            settings["-IDV_WEEKDAY-"] = values["-IDV_WEEKDAY-"]
            settings["-GAP_ANALYSIS-"] = values["-GAP_ANALYSIS-"]
            try:
                settings["-GAP_THRESHOLD-"] = float(values["-GAP_THRESHOLD-"])
            except ValueError:
                sg.popup_no_border("Please correct Gap Threshold value")
                continue
            settings["-GAP_TYPE-"] = values["-GAP_TYPE-"]
            settings["-APPLY_EXCLUSIONS-"] = values["-APPLY_EXCLUSIONS-"]
            settings["-AUTO_EXCLUSIONS-"] = values["-AUTO_EXCLUSIONS-"]
            if values["-FILE-"] and values["-FILE-"] != "Loaded":
                result = import_news_events(values["-FILE-"])
                if result:
                    news_events_loaded = True
                    break
                else:
                    sg.popup_no_border(
                        "This does not appear to be a CSV from\nhttps://www.fxstreet.com/economic-calendar"
                    )
                    continue
            else:
                break

        elif event[0] == "-LINK-":
            webbrowser.open(event[1])
    window.close()
    Checkbox.clear_elements()


def main():
    # try to load news events if csv found
    threading.Thread(target=find_and_import_news_events, daemon=True).start()

    # load default settings or last used
    app_settings = {}
    settings_filename = os.path.join(os.path.curdir, "data", "tta_settings.json")
    if os.path.exists(settings_filename):
        try:
            with open(settings_filename, "r") as f:
                app_settings = json.load(f)
        except json.JSONDecodeError:
            # delete bad file
            results_queue.put(
                (
                    "-ERROR-",
                    "Error loading tta_settings.json\nDeleting corrupt file and\nfalling back to defaults",
                )
            )
            try:
                os.remove(settings_filename)
            except:
                results_queue.put(
                    (
                        "-ERROR-",
                        "Could not delete corrupt tta_settings.json file.\nPlease remove manually from data directory",
                    )
                )
                pass
    # setup defaults if setting did not load/exist
    set_default_app_settings(app_settings)

    sg.theme(themes[app_settings["-THEME-"]])
    sg.theme_button_color(button_color)  # override button color

    def get_main_window(values=None, old_window=None):
        tg_strat_layout = []
        for tg_strat in ["Put-Call Comb", "Best P/C", "Puts", "Calls"]:
            tg_gap_layout = []
            for tg_gap in ["All", "Gap Up", "Gap Down"]:
                tg_day_layout = []
                for day in ["All", "Mon", "Tue", "Wed", "Thu", "Fri"]:
                    tab = sg.Tab(
                        day,
                        [
                            [
                                sg.Table(
                                    (
                                        old_window.key_dict[
                                            f"-TABLE_{tg_strat}_{tg_gap}_{day}-"
                                        ].Values
                                        if old_window
                                        else ""
                                    ),
                                    ["Top Times", "Avg", "Source File"],
                                    key=f"-TABLE_{tg_strat}_{tg_gap}_{day}-",
                                    expand_x=True,
                                    auto_size_columns=True,
                                    # background_color="white",
                                    # alternating_row_color="darkgrey",
                                    # header_text_color="black",
                                    # header_background_color="lightblue",
                                )
                            ]
                        ],
                        expand_x=True,
                    )
                    tg_day_layout.append(tab)
                gap_group_tab = sg.Tab(
                    tg_gap,
                    [[sg.TabGroup([tg_day_layout], expand_x=True)]],
                    expand_x=True,
                )
                tg_gap_layout.append(gap_group_tab)
            main_group_tab = sg.Tab(
                tg_strat,
                [[sg.TabGroup([tg_gap_layout], expand_x=True)]],
                expand_x=True,
            )
            tg_strat_layout.append(main_group_tab)

        chart_tab = sg.Tab(
            "Charts",
            [
                [
                    sg.TabGroup(
                        [
                            [
                                sg.Tab(
                                    "PnL",
                                    [
                                        [
                                            sg.Table(
                                                (
                                                    old_window.key_dict[
                                                        "-PNL_TABLE_CHART-"
                                                    ].Values
                                                    if old_window
                                                    else ""
                                                ),
                                                [
                                                    "Strategy",
                                                    "Final Value",
                                                    "Profit",
                                                    "Total Return",
                                                    "CAGR",
                                                    "Max DD",
                                                    "Max DD Days",
                                                    "W Strk",
                                                    "L Strk",
                                                    "High Month",
                                                    "Low Month",
                                                    "MAR",
                                                    "Sharpe",
                                                ],
                                                key="-PNL_TABLE_CHART-",
                                                expand_x=True,
                                                num_rows=4,
                                                auto_size_columns=True,
                                                # background_color="lightgrey",
                                                # alternating_row_color="darkgrey",
                                                # header_text_color="black",
                                                # header_background_color="lightblue",
                                            )
                                        ],
                                        [
                                            sg.Image(
                                                key="-PNL_CHART-",
                                                size=(
                                                    int(screen_size[0] * 0.25),
                                                    int(screen_size[1] * 0.25),
                                                ),
                                                expand_x=True,
                                                expand_y=True,
                                            )
                                        ],
                                    ],
                                ),
                                sg.Tab(
                                    "PnL by Weekday",
                                    [
                                        [
                                            sg.Image(
                                                key="-WEEKDAY_PNL_CHART-",
                                                size=(
                                                    int(screen_size[0] * 0.25),
                                                    int(screen_size[1] * 0.25),
                                                ),
                                                expand_x=True,
                                                expand_y=True,
                                            )
                                        ],
                                    ],
                                ),
                                sg.Tab(
                                    "Monthly PnL",
                                    [
                                        [
                                            sg.Image(
                                                key="-MONTHLY_PNL_CHART-",
                                                size=(
                                                    int(screen_size[0] * 0.25),
                                                    int(screen_size[1] * 0.25),
                                                ),
                                                expand_x=True,
                                                expand_y=True,
                                            )
                                        ],
                                    ],
                                ),
                                sg.Tab(
                                    "PnL by News Event",
                                    [
                                        [
                                            sg.Image(
                                                key="-NEWS_PNL_CHART-",
                                                size=(
                                                    int(screen_size[0] * 0.25),
                                                    int(screen_size[1] * 0.25),
                                                ),
                                                expand_x=True,
                                                expand_y=True,
                                            )
                                        ],
                                    ],
                                ),
                                sg.Tab(
                                    "Avg PnL per News Event",
                                    [
                                        [
                                            sg.Image(
                                                key="-NEWS_AVG_PNL_CHART-",
                                                size=(
                                                    int(screen_size[0] * 0.25),
                                                    int(screen_size[1] * 0.25),
                                                ),
                                                expand_x=True,
                                                expand_y=True,
                                            )
                                        ],
                                    ],
                                ),
                                sg.Tab(
                                    "Correlation Matrix",
                                    [
                                        [
                                            sg.Image(
                                                key="-CORRELATION_MATRIX-",
                                                size=(
                                                    int(screen_size[0] * 0.25),
                                                    int(screen_size[1] * 0.25),
                                                ),
                                                expand_x=True,
                                                expand_y=True,
                                            )
                                        ],
                                    ],
                                    key="-CORRELATION_MATRIX_TAB-",
                                    visible=(
                                        old_window["-CORRELATION_MATRIX_TAB-"].visible
                                        if old_window
                                        else False
                                    ),
                                ),
                            ]
                        ],
                        expand_x=True,
                        expand_y=True,
                    )
                ]
            ],
        )
        tg_strat_layout.append(chart_tab)

        layout = [
            [
                sg.Button("Analyze", pad=(5, 10), bind_return_key=True),
                sg.Text("  "),
                sg.pin(
                    sg.ProgressBar(
                        100,
                        orientation="h",
                        size=(50, 30),
                        key="-PROGRESS-",
                        expand_x=True,
                        visible=False,
                    ),
                ),
                sg.pin(sg.Button("Cancel", pad=(20, 0), visible=False)),
                sg.Push(),
                sg.Button("CSV Merger"),
                sg.Combo(
                    list(themes),
                    default_value=app_settings["-THEME-"],
                    key="-THEME-",
                    enable_events=True,
                    readonly=True,
                ),
                sg.Text(__version__),
            ],
            [sg.Text("Select trade log CSV file:")],
            [
                sg.Input(
                    key="-FILE-",
                    expand_x=True,
                ),
                sg.Button("Browse"),
            ],
            [
                Checkbox(
                    "Portfolio Mode",
                    app_settings["-PORTFOLIO_MODE-"],
                    key="-PORTFOLIO_MODE-",
                    size=(12, 1),
                    enable_events=True,
                ),
                sg.pin(
                    sg.Combo(
                        [],
                        key="-STRATEGY_SELECT-",
                        readonly=True,
                        visible=app_settings["-PORTFOLIO_MODE-"],
                        enable_events=True,
                        size=(50, 1),
                    )
                ),
                sg.pin(
                    Checkbox(
                        "Pass-through Mode",
                        False,
                        key="-PASSTHROUGH_MODE-",
                        size=(14, 1),
                        tooltip="This will skip analysis and allow the trades\nto pass-through as is to the walk-forward test.\nThis can be used for adding non-tranche\nstrategies to the portfolio for analysis",
                        visible=app_settings["-PORTFOLIO_MODE-"],
                    )
                ),
                sg.Push(),
                sg.Button("Options", button_color="green"),
            ],
            [
                sg.Frame(
                    "",
                    [
                        [
                            sg.Text(
                                "Trailing Avg 1:",
                                tooltip="Number of months for first averaging period.\nNote: should be the shorter period",
                            ),
                            sg.Input(
                                app_settings["-AVG_PERIOD_1-"],
                                key="-AVG_PERIOD_1-",
                                size=(3, 1),
                                justification="c",
                                tooltip="Number of months for first averaging period.\nNote: should be the shorter period",
                            ),
                            sg.Text("Months "),
                            sg.Text(
                                "Weight:",
                                tooltip="Weight in % for first avg period\nNote: Set to 100 for this and 0 for 2nd if only using 1 period",
                            ),
                            sg.Input(
                                app_settings["-PERIOD_1_WEIGHT-"],
                                key="-PERIOD_1_WEIGHT-",
                                size=(3, 1),
                                justification="c",
                                tooltip="Weight in % for first avg period\nNote: Set to 100 for this and 0 for 2nd if only using 1 period",
                            ),
                            sg.Text("   "),
                            sg.Text(
                                "Trailing Avg 2:",
                                tooltip="Number of months for second averaging period.\nNote: should be the longer period or same as 1",
                            ),
                            sg.Input(
                                app_settings["-AVG_PERIOD_2-"],
                                key="-AVG_PERIOD_2-",
                                size=(3, 1),
                                justification="c",
                                tooltip="Number of months for second averaging period.\nNote: should be the longer period or same as 1",
                            ),
                            sg.Text("Months "),
                            sg.Text(
                                "Weight:",
                                tooltip="Weight in % for second avg period\nNote: Set to 0 to only use the 1st period",
                            ),
                            sg.Input(
                                app_settings["-PERIOD_2_WEIGHT-"],
                                key="-PERIOD_2_WEIGHT-",
                                size=(3, 1),
                                justification="c",
                                tooltip="Weight in % for second avg period\nNote: Set to 0 to only use the 1st period",
                            ),
                        ],
                        [
                            sg.Text(
                                "Select Top",
                                pad=(5, 5),
                                tooltip="Highlight the top n times for each month in the heatmap.\nWill also display the top n times below",
                            ),
                            sg.Input(
                                app_settings["-TOP_X-"],
                                key="-TOP_X-",
                                size=(2, 1),
                                pad=(0, 0),
                                justification="c",
                                tooltip="Highlight the top n times for each month in the heatmap.\nWill also display the top n times below",
                            ),
                            sg.Text("Time Tranches", pad=(5, 0)),
                            sg.Text("Above:"),
                            sg.Input(
                                app_settings["-TOP_TIME_THRESHOLD-"],
                                key="-TOP_TIME_THRESHOLD-",
                                size=(4, 1),
                                justification="c",
                            ),
                            sg.Text(
                                app_settings["-CALC_TYPE-"],
                                key="-CALC_TYPE_TEXT-",
                                pad=(0, 0),
                            ),
                            sg.Text("   Averaging Mode"),
                            sg.Combo(
                                ["PCR", "PnL"],
                                app_settings["-CALC_TYPE-"],
                                key="-CALC_TYPE-",
                                readonly=True,
                                enable_events=True,
                            ),
                            sg.Text(
                                "   Aggregation Period",
                                tooltip="Aggregate the results into monthly averages or weekly\nIf doing a walkforward test the top times will be updated at this frequency.",
                            ),
                            sg.Combo(
                                ["Monthly", "Semi-Monthly", "Weekly"],
                                app_settings["-AGG_TYPE-"],
                                key="-AGG_TYPE-",
                                tooltip="Aggregate the results into monthly averages or weekly\nIf doing a walkforward test the top times will be updated at this frequency.",
                                readonly=True,
                            ),
                            sg.Push(),
                            Checkbox(
                                "Open Excel files after creation",
                                app_settings["-OPEN_FILES-"],
                                key="-OPEN_FILES-",
                                size=(20, 1),
                            ),
                        ],
                    ],
                    expand_x=True,
                )
            ],
            [
                sg.Frame(
                    "",
                    [
                        [
                            Checkbox(
                                "Perform walk-forward backtest",
                                app_settings["-BACKTEST-"],
                                key="-BACKTEST-",
                                size=(19, 1),
                                tooltip="Out of sample/walk forward test.  Optimize times for prior lookback period\nand test outcome in the following month (out of sample).\nWalk forward to the next month and re-optomize times.",
                            ),
                            sg.Text(
                                "Starting Value",
                                tooltip="Porfolio Value to start from.  If using scaling the BP per contract\nwill be divided by this amount to determine the number of contracts to trade",
                            ),
                            sg.Input(
                                app_settings["-START_VALUE-"],
                                size=(10, 1),
                                key="-START_VALUE-",
                                justification="r",
                                tooltip="Porfolio Value to start from.  If using scaling the BP per contract\nwill be divided by this amount to determine the number of contracts to trade",
                            ),
                            sg.Text(
                                "   Start Date",
                                tooltip="Date to start test from. Leave blank to automatically\nselect the earliest available start date from the available data",
                            ),
                            sg.Input(
                                app_settings["-START_DATE-"],
                                key="-START_DATE-",
                                size=(12, 1),
                                justification="c",
                                tooltip="Date to start test from. Leave blank to automatically\nselect the earliest available start date from the available data",
                            ),
                            sg.Text(
                                " End Date",
                                tooltip="Date to end test. Leave blank to automatically\nselect the latest available end date from the available data",
                            ),
                            sg.Input(
                                app_settings["-END_DATE-"],
                                key="-END_DATE-",
                                size=(12, 1),
                                justification="c",
                                tooltip="Date to end test. Leave blank to automatically\nselect the latest available end date from the available data",
                            ),
                            sg.Push(),
                            Checkbox(
                                "Export Trades to CSV",
                                app_settings["-EXPORT-"],
                                key="-EXPORT-",
                                size=(16, 1),
                            ),
                        ],
                        [
                            Checkbox(
                                "Use Scaling",
                                app_settings["-SCALING-"],
                                key="-SCALING-",
                                size=(10, 1),
                                tooltip="Uses scaling logic to determine the number of contracts\nto trade each day of the backtest based on current portfolio value\nand the BP per contract.",
                            ),
                            sg.Text(
                                "Min Tranches",
                                tooltip="When using scaling, this the minimum number of tranche times",
                            ),
                            sg.Input(
                                app_settings["-MIN_TRANCHES-"],
                                key="-MIN_TRANCHES-",
                                size=(3, 1),
                                justification="c",
                                tooltip="When using scaling, this the minimum number of tranche times",
                            ),
                            sg.Text(
                                "   Max Tranches",
                                tooltip="When using scaling, this the maximum number of tranche times.\nAdditonal contracts over this amount will be distributed among the available tranche times.",
                            ),
                            sg.Input(
                                app_settings["-MAX_TRANCHES-"],
                                key="-MAX_TRANCHES-",
                                size=(3, 1),
                                justification="c",
                                tooltip="When using scaling, this the maximum number of tranche times.\nAdditonal contracts over this amount will be distributed among the available tranche times.",
                            ),
                            sg.Text(
                                "   BP Per Contract",
                                tooltip="Amount of buying power to use for each contract.  This is only used to determine\nthe total number of contracts to trade each day when using scaling.",
                            ),
                            sg.Input(
                                app_settings["-BP_PER-"],
                                key="-BP_PER-",
                                size=(6, 1),
                                justification="r",
                                tooltip="Amount of buying power to use for each contract.  This is only used to determine\nthe total number of contracts to trade each day when using scaling.",
                            ),
                            sg.pin(
                                sg.Text(
                                    "Portfolio Weight",
                                    visible=app_settings["-PORTFOLIO_MODE-"],
                                    key="-PORT_WEIGHT_TEXT1-",
                                )
                            ),
                            sg.pin(
                                sg.Input(
                                    "100",
                                    key="-PORT_WEIGHT-",
                                    size=(5, 1),
                                    justification="c",
                                    tooltip="The weight the selected strategy will have in the portfolio rebalanced daily.",
                                    visible=app_settings["-PORTFOLIO_MODE-"],
                                )
                            ),
                            sg.pin(
                                sg.Text(
                                    "%",
                                    pad=(0, 0),
                                    visible=app_settings["-PORTFOLIO_MODE-"],
                                    key="-PORT_WEIGHT_TEXT2-",
                                )
                            ),
                            sg.Push(),
                            Checkbox(
                                "Create OO Signal File",
                                app_settings["-EXPORT_OO_SIG-"],
                                key="-EXPORT_OO_SIG-",
                                size=(16, 1),
                            ),
                        ],
                    ],
                    expand_x=True,
                )
            ],
            [
                sg.TabGroup(
                    [tg_strat_layout],
                    expand_x=True,
                    key="-TAB_GROUP-",
                )
            ],
        ]
        if old_window:
            # create new window with same size and location
            window_size = old_window.size
            window_position = old_window.current_location(False)
        else:
            window_size = (int(screen_size[0] * 0.7), int(screen_size[1] * 0.8))
            window_position = (None, None)
        window = sg.Window(
            "Tranche Time Analyzer",
            layout,
            size=window_size,
            resizable=True,
            finalize=True,
            location=window_position,
        )
        window["-PROGRESS-"].Widget.config(mode="indeterminate")
        Checkbox.initial(window)

        # reselect previously selected tabs
        if old_window:
            # get the currently selected tab
            tab_group = old_window["-TAB_GROUP-"]
            selected = tab_group.get()
            selected_id = [
                "Put-Call Comb",
                "Best P/C",
                "Puts",
                "Calls",
                "Charts",
            ].index(selected)
            window["-TAB_GROUP-"].Widget.select(selected_id)

        # If we have previous values, update the window
        if values:
            for key in values:
                if key in window.AllKeysDict:
                    element = window[key]
                    if isinstance(element, sg.Table):
                        # For Table elements, we need to update the values differently
                        data = old_window.key_dict[key].Values
                        if key == "-PNL_TABLE_CHART-":
                            element.update(values=data, num_rows=min(len(data), 4))
                        else:
                            element.update(values=data, num_rows=len(data))

                    elif isinstance(element, sg.Checkbox):
                        # For Checkbox elements, we need to use the 'value' parameter
                        element.update(value=values[key])
                    elif not isinstance(element, sg.TabGroup):
                        # For most other elements, we can use the 'value' parameter
                        if key == "-STRATEGY_SELECT-":
                            element.update(values=old_window[key].Values)
                        try:
                            element.update(value=values[key])
                        except:
                            pass
        return window

    window = get_main_window()
    error = False
    chart_images = {}
    strategy_settings = {}
    test_running = False
    while True:
        event, values = window.read(timeout=100)
        if event == sg.WIN_CLOSED:
            break
        elif event == "Cancel" and test_running:
            # button will not do anything for normal analysis
            cancel_flag.set()
            window["Cancel"].update("Canceling...", disabled=True)

        elif event == "CSV Merger":
            csv_merger_window()

        elif event == "Options":
            if values["-PORTFOLIO_MODE-"]:
                selected_strategy = values["-STRATEGY_SELECT-"]
            else:
                selected_strategy = "-SINGLE_MODE-"
            if selected_strategy:
                options_window(strategy_settings[selected_strategy])
            else:
                sg.popup_no_border("Please select a strategy first")

        elif event == "Analyze":
            files_list = values["-FILE-"].split(";")
            for file in files_list:
                file_ext = os.path.splitext(file)[1].lower()
                if file_ext != ".csv":
                    sg.popup_no_border(
                        "One or more of the selected files\ndo not appear to be a csv file!"
                    )
                    error = True
                    break
            if error:
                error = False  # reset
                continue

            if values["-PORTFOLIO_MODE-"]:
                selected_strategy = values["-STRATEGY_SELECT-"]
            else:
                selected_strategy = "-SINGLE_MODE-"

            # Save current settings for the selected strategy
            if selected_strategy not in strategy_settings:
                strategy_settings[selected_strategy] = {}
            update_strategy_settings(values, strategy_settings[selected_strategy])

            # Validate settings for all strategies
            result = validate_strategy_settings(strategy_settings)
            if type(result) == str:
                # there was an error
                sg.popup_no_border(result)
                continue

            start_date_str = values["-START_DATE-"]
            end_date_str = values["-END_DATE-"]
            if start_date_str:
                try:
                    start_date = parser.parse(start_date_str, fuzzy=True).date()
                except ValueError:
                    sg.popup_no_border(
                        "Problem parsing Start Date.\nTry entering in YYYY-MM-DD format"
                    )
                    continue
            else:
                start_date = None
            if end_date_str:
                try:
                    end_date = parser.parse(end_date_str, fuzzy=True).date()
                except ValueError:
                    sg.popup_no_border(
                        "Problem parsing End Date.\nTry entering in YYYY-MM-DD format"
                    )
                    continue
            else:
                end_date = None

            # All settings validated, proceed with analysis
            window["-PROGRESS-"].update(visible=True)
            window["Analyze"].update("Working...", disabled=True)
            window["Cancel"].update(visible=True)
            threading.Thread(
                target=lambda: run_analysis_threaded(
                    files_list,
                    strategy_settings,
                    values["-OPEN_FILES-"],
                ),
                daemon=True,
            ).start()
            test_running = True

            save_settings(app_settings, settings_filename, values)

        elif event == "Browse":
            files = sg.popup_get_file(
                "",
                file_types=(("CSV Files", "*.csv"),),
                multiple_files=True,
                no_window=True,
                files_delimiter=";",
            )
            if not files:
                # user hit cancel
                continue

            if type(files) == tuple:
                file_str = ";".join(files)
            else:
                file_str = files
            window["-FILE-"].update(file_str)

            strategy_settings.clear()  # reset strategy settings
            if values["-PORTFOLIO_MODE-"]:
                strategies = [os.path.basename(file) for file in file_str.split(";")]
                window["-STRATEGY_SELECT-"].update(values=strategies)
                if strategies:
                    # select the first strategy in the list
                    window["-STRATEGY_SELECT-"].update(value=strategies[0])

            else:
                strategies = ["-SINGLE_MODE-"]
                window["-STRATEGY_SELECT-"].update(values=[])

            # Initialize settings for each strategy
            for strategy in strategies:
                strategy_settings[strategy] = {}
                update_strategy_settings(values, strategy_settings[strategy])
                # set the portfolio weightings to equal weight
                strategy_settings[strategy]["-PORT_WEIGHT-"] = 100 / len(strategies)
                window["-PORT_WEIGHT-"].update(
                    format_float(strategy_settings[strategy]["-PORT_WEIGHT-"])
                )

            # We must continue so the GUI does not update with old values from the values dict
            continue

        elif event == "-PORTFOLIO_MODE-":
            portfolio_mode = values["-PORTFOLIO_MODE-"]
            for key in [
                "-STRATEGY_SELECT-",
                "-PASSTHROUGH_MODE-",
                "-PORT_WEIGHT_TEXT1-",
                "-PORT_WEIGHT-",
                "-PORT_WEIGHT_TEXT2-",
            ]:
                window[key].update(visible=portfolio_mode)

            if portfolio_mode:
                files = values["-FILE-"].split(";")
                strategies = [os.path.basename(file) for file in files]
                window["-STRATEGY_SELECT-"].update(values=strategies)
                if strategies:
                    # select the first strategy in the list
                    window["-STRATEGY_SELECT-"].update(value=strategies[0])
            else:
                strategies = ["-SINGLE_MODE-"]

            # Initialize settings for each strategy
            strategy_settings.clear()
            for strategy in strategies:
                strategy_settings[strategy] = {}
                update_strategy_settings(values, strategy_settings[strategy])
                # set the portfolio weightings to equal weight
                strategy_settings[strategy]["-PORT_WEIGHT-"] = 100 / len(strategies)
                window["-PORT_WEIGHT-"].update(
                    format_float(strategy_settings[strategy]["-PORT_WEIGHT-"])
                )

        elif event == "-STRATEGY_SELECT-":
            selected_strategy = values["-STRATEGY_SELECT-"]
            if selected_strategy in strategy_settings:
                for key, value in strategy_settings[selected_strategy].items():
                    if key in window.AllKeysDict:
                        # print(f"updating key: {key} value: {value}")
                        window[key].update(format_float(value))

        elif event == "__TIMEOUT__":
            if chart_images:
                # Resize the image and update the element
                window_w, window_h = window.size
                image_width_max = int(window_w * 0.90)
                image_height_max = int(window_h * 0.45)
                image_width = min(
                    image_width_max, int(image_height_max / image_aspect_ratio)
                )
                image_size = (image_width, int(image_width * image_aspect_ratio))
                for chart, image_b64 in chart_images.items():
                    # we only need to pass the height
                    resized_image = resize_base64_image(image_b64, image_size[1])
                    window[chart].update(data=resized_image)

        elif event == "-THEME-":
            new_theme = themes[values["-THEME-"]]
            sg.theme(new_theme)
            sg.theme_button_color(button_color)  # override button color
            save_settings(app_settings, settings_filename, values)
            # Recreate the window with the new theme
            Checkbox.clear_elements()
            new_window = get_main_window(values.copy(), window)

            # Close the current window
            window.close()

            window = new_window
            continue

        elif event == "-CALC_TYPE-":
            window["-CALC_TYPE_TEXT-"].update(values["-CALC_TYPE-"])

        # Update strategy settings when values change but not while analysis is running
        if (
            values["-PORTFOLIO_MODE-"]
            and values["-STRATEGY_SELECT-"]
            and not test_running
        ):
            selected_strategy = values["-STRATEGY_SELECT-"]
            update_strategy_settings(values, strategy_settings[selected_strategy])
        elif not values["-PORTFOLIO_MODE-"] and not test_running:
            if "-SINGLE_MODE-" not in strategy_settings:
                strategy_settings["-SINGLE_MODE-"] = {}
            update_strategy_settings(values, strategy_settings["-SINGLE_MODE-"])

        # check if thread is done
        while True:
            try:
                result_key, results = results_queue.get(block=False)
            except queue.Empty:
                break

            if result_key == "-RUN_ANALYSIS_END-":
                df_dicts = results
                for right_type, day_dict in df_dicts.items():
                    for day, df_dict in day_dict.items():

                        top_times_df = get_top_times(df_dict, strategy_settings)
                        table_data = top_times_df.values.tolist()
                        if right_type.endswith("Gap Up"):
                            window[
                                f"-TABLE_{right_type.removesuffix(" Gap Up")}_{"Gap Up"}_{day}-"
                            ].update(values=table_data, num_rows=len(table_data))
                        elif right_type.endswith("Gap Down"):
                            window[
                                f"-TABLE_{right_type.removesuffix(" Gap Down")}_{"Gap Down"}_{day}-"
                            ].update(values=table_data, num_rows=len(table_data))
                        else:
                            window[f"-TABLE_{right_type}_{"All"}_{day}-"].update(
                                values=table_data, num_rows=len(table_data)
                            )

                if values["-BACKTEST-"]:
                    path = os.path.join(
                        os.path.dirname(files_list[0]), "data", "trade_logs"
                    )
                    os.makedirs(path, exist_ok=True)
                    threading.Thread(
                        target=lambda: walk_forward_test(
                            df_dicts,
                            path,
                            strategy_settings,
                            initial_value=float(values["-START_VALUE-"]),
                            start=start_date,
                            end=end_date,
                            use_scaling=values["-SCALING-"],
                            export_trades=values["-EXPORT-"],
                            export_OO_sig=values["-EXPORT_OO_SIG-"],
                        ),
                        daemon=True,
                    ).start()

                else:
                    window["-PROGRESS-"].update(visible=False)
                    window["Cancel"].update(visible=False)
                    window["Analyze"].update("Analyze", disabled=False)
                    test_running = False

            elif result_key == "-BACKTEST_END-":
                window["-PROGRESS-"].update(visible=False)
                window["Cancel"].update(visible=False)
                window["Analyze"].update("Analyze", disabled=False)
                test_running = False
                check_result = True
                for result_df in results.values():
                    if result_df.empty:
                        check_result = False
                        break
                if not check_result:
                    sg.popup_no_border(
                        "One or more of your strategies or files contains no results.\nPerhaps the dataset does not go back far enough?"
                    )
                    continue
                table_data, img_data = get_pnl_plot(results)
                chart_images["-PNL_CHART-"] = img_data
                window["-PNL_TABLE_CHART-"].update(
                    values=table_data, num_rows=min(len(table_data), 4)
                )

                chart_images["-WEEKDAY_PNL_CHART-"] = get_weekday_pnl_chart(results)
                chart_images["-MONTHLY_PNL_CHART-"] = get_monthly_pnl_chart(results)
                chart_images["-NEWS_PNL_CHART-"] = get_news_event_pnl_chart(results)
                chart_images["-NEWS_AVG_PNL_CHART-"] = get_news_event_pnl_chart(
                    results, False
                )
                if values["-PORTFOLIO_MODE-"]:
                    chart_images["-CORRELATION_MATRIX-"] = get_correlation_matrix(
                        results
                    )
                    window["-CORRELATION_MATRIX_TAB-"].update(visible=True)
                # resize the images to fit in the window
                for chart, image_data in chart_images.items():
                    chart_image = resize_base64_image(
                        image_data,
                        int(window.size[1] * 0.25),
                    )
                    window[chart].update(data=chart_image)

                window["-TAB_GROUP-"].Widget.select(4)

                # recreate window to have table columns auto adjust
                new_theme = themes[values["-THEME-"]]
                sg.theme(new_theme)
                sg.theme_button_color(button_color)  # override button color

                # Recreate the window with the new theme
                Checkbox.clear_elements()
                new_window = get_main_window(values.copy(), window)

                # Close the current window
                window.close()

                window = new_window
                continue

            elif result_key == "-BACKTEST_CANCELED-":
                window["-PROGRESS-"].update(visible=False)
                window["Cancel"].update("Cancel", disabled=False, visible=False)
                window["Analyze"].update("Analyze", disabled=False)
                test_running = False

            elif result_key == "-IMPORT_NEWS-":
                sg.popup_no_border(results, auto_close=True, auto_close_duration=5)

            elif result_key == "-ERROR-":
                sg.popup_no_border(results)
        # move the progress bar
        if window["Analyze"].Disabled:
            window["-PROGRESS-"].Widget["value"] += 10
        else:
            window["-PROGRESS-"].Widget["value"] = 0

    window.close()


if __name__ == "__main__":
    main()
